
meep3themeepthatlived.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  0000295e  000029f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000295e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000444  00800248  00800248  00002b3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b3a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00002b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001746  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  000044a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a50  00000000  00000000  00004a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  000054dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000858  00000000  00000000  00005bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e3d  00000000  00000000  00006404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00007241  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <SerTxISR>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e5       	ldi	r30, 0x5E	; 94
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 34       	cpi	r26, 0x48	; 72
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a8 e4       	ldi	r26, 0x48	; 72
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 38       	cpi	r26, 0x8C	; 140
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
      9e:	0c 94 ad 14 	jmp	0x295a	; 0x295a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:
      a6:	00 91 98 05 	lds	r16, 0x0598
      aa:	03 95       	inc	r16
      ac:	00 93 98 05 	sts	0x0598, r16
      b0:	e0 91 ad 05 	lds	r30, 0x05AD
      b4:	f0 91 ae 05 	lds	r31, 0x05AE
      b8:	c1 91       	ld	r28, Z+
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	d1 91       	ld	r29, Z+
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f 91       	pop	r16
      c2:	0f bf       	out	0x3f, r16	; 63
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	bf 91       	pop	r27
      ce:	af 91       	pop	r26
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	7f 91       	pop	r23
      d6:	6f 91       	pop	r22
      d8:	5f 91       	pop	r21
      da:	4f 91       	pop	r20
      dc:	3f 91       	pop	r19
      de:	2f 91       	pop	r18
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	df 90       	pop	r13
      ea:	cf 90       	pop	r12
      ec:	bf 90       	pop	r11
      ee:	af 90       	pop	r10
      f0:	9f 90       	pop	r9
      f2:	8f 90       	pop	r8
      f4:	7f 90       	pop	r7
      f6:	6f 90       	pop	r6
      f8:	5f 90       	pop	r5
      fa:	4f 90       	pop	r4
      fc:	3f 90       	pop	r3
      fe:	2f 90       	pop	r2
     100:	1f 90       	pop	r1
     102:	0f 90       	pop	r0
     104:	08 95       	ret

00000106 <OSCtxSw>:
     106:	0f 92       	push	r0
     108:	1f 92       	push	r1
     10a:	2f 92       	push	r2
     10c:	3f 92       	push	r3
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
     146:	0f b7       	in	r16, 0x3f	; 63
     148:	0f 93       	push	r16
     14a:	e0 91 bb 05 	lds	r30, 0x05BB
     14e:	f0 91 bc 05 	lds	r31, 0x05BC
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	c1 93       	st	Z+, r28
     156:	de b7       	in	r29, 0x3e	; 62
     158:	d1 93       	st	Z+, r29
     15a:	00 91 9d 05 	lds	r16, 0x059D
     15e:	00 93 9e 05 	sts	0x059E, r16
     162:	e0 91 ad 05 	lds	r30, 0x05AD
     166:	f0 91 ae 05 	lds	r31, 0x05AE
     16a:	e0 93 bb 05 	sts	0x05BB, r30
     16e:	f0 93 bc 05 	sts	0x05BC, r31
     172:	c1 91       	ld	r28, Z+
     174:	cd bf       	out	0x3d, r28	; 61
     176:	d1 91       	ld	r29, Z+
     178:	de bf       	out	0x3e, r29	; 62
     17a:	0f 91       	pop	r16
     17c:	0f bf       	out	0x3f, r16	; 63
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	5f 90       	pop	r5
     1b4:	4f 90       	pop	r4
     1b6:	3f 90       	pop	r3
     1b8:	2f 90       	pop	r2
     1ba:	1f 90       	pop	r1
     1bc:	0f 90       	pop	r0
     1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
     1c0:	00 91 9d 05 	lds	r16, 0x059D
     1c4:	00 93 9e 05 	sts	0x059E, r16
     1c8:	e0 91 ad 05 	lds	r30, 0x05AD
     1cc:	f0 91 ae 05 	lds	r31, 0x05AE
     1d0:	e0 93 bb 05 	sts	0x05BB, r30
     1d4:	f0 93 bc 05 	sts	0x05BC, r31
     1d8:	c1 91       	ld	r28, Z+
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	d1 91       	ld	r29, Z+
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f 91       	pop	r16
     1e2:	0f bf       	out	0x3f, r16	; 63
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	1f 90       	pop	r1
     222:	0f 90       	pop	r0
     224:	08 95       	ret

00000226 <OSTickISR>:
     226:	0f 92       	push	r0
     228:	1f 92       	push	r1
     22a:	2f 92       	push	r2
     22c:	3f 92       	push	r3
     22e:	4f 92       	push	r4
     230:	5f 92       	push	r5
     232:	6f 92       	push	r6
     234:	7f 92       	push	r7
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
     266:	0f b7       	in	r16, 0x3f	; 63
     268:	00 68       	ori	r16, 0x80	; 128
     26a:	0f 93       	push	r16
     26c:	00 91 ba 05 	lds	r16, 0x05BA
     270:	03 95       	inc	r16
     272:	00 93 ba 05 	sts	0x05BA, r16
     276:	01 30       	cpi	r16, 0x01	; 1
     278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	e0 91 bb 05 	lds	r30, 0x05BB
     282:	f0 91 bc 05 	lds	r31, 0x05BC
     286:	c1 93       	st	Z+, r28
     288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
     28a:	09 ed       	ldi	r16, 0xD9	; 217
     28c:	06 bd       	out	0x26, r16	; 38
     28e:	78 94       	sei
     290:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <OSTimeTick>
     294:	00 00       	nop
     296:	0e 94 1e 0c 	call	0x183c	; 0x183c <OSIntExit>
     29a:	0f 91       	pop	r16
     29c:	0f bf       	out	0x3f, r16	; 63
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	1f 90       	pop	r1
     2dc:	0f 90       	pop	r0
     2de:	08 95       	ret

000002e0 <WatchDogReset>:
     2e0:	a8 95       	wdr
     2e2:	08 95       	ret

000002e4 <SerTxISR>:
     2e4:	0f 92       	push	r0
     2e6:	1f 92       	push	r1
     2e8:	2f 92       	push	r2
     2ea:	3f 92       	push	r3
     2ec:	4f 92       	push	r4
     2ee:	5f 92       	push	r5
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
     324:	0f b7       	in	r16, 0x3f	; 63
     326:	00 68       	ori	r16, 0x80	; 128
     328:	0f 93       	push	r16
     32a:	00 91 ba 05 	lds	r16, 0x05BA
     32e:	03 95       	inc	r16
     330:	00 93 ba 05 	sts	0x05BA, r16
     334:	78 94       	sei
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	31 e0       	ldi	r19, 0x01	; 1

0000033a <loop>:
     33a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <PostTxCompleteSem>
     33e:	23 17       	cp	r18, r19
     340:	e1 f7       	brne	.-8      	; 0x33a <loop>
     342:	0e 94 1e 0c 	call	0x183c	; 0x183c <OSIntExit>
     346:	0f 91       	pop	r16
     348:	0f bf       	out	0x3f, r16	; 63
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	bf 91       	pop	r27
     354:	af 91       	pop	r26
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	7f 91       	pop	r23
     35c:	6f 91       	pop	r22
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	bf 90       	pop	r11
     374:	af 90       	pop	r10
     376:	9f 90       	pop	r9
     378:	8f 90       	pop	r8
     37a:	7f 90       	pop	r7
     37c:	6f 90       	pop	r6
     37e:	5f 90       	pop	r5
     380:	4f 90       	pop	r4
     382:	3f 90       	pop	r3
     384:	2f 90       	pop	r2
     386:	1f 90       	pop	r1
     388:	0f 90       	pop	r0
     38a:	08 95       	ret

0000038c <EndISR>:
     38c:	23 95       	inc	r18
     38e:	08 95       	ret

00000390 <main>:
 *********************************************************************************************************
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	InitPeripherals();
     398:	0e 94 7f 07 	call	0xefe	; 0xefe <InitPeripherals>

    OSInit();                                              /* Initialize uC/OS-II                      */
     39c:	0e 94 32 0b 	call	0x1664	; 0x1664 <OSInit>

/* Create OS_EVENT resources here  */
LedMBox=OSMboxCreate((void *)0);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <OSMboxCreate>
     3a8:	90 93 ce 03 	sts	0x03CE, r25
     3ac:	80 93 cd 03 	sts	0x03CD, r24
SerialTxMBox=OSMboxCreate((void *)0);
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <OSMboxCreate>
     3b8:	90 93 d4 03 	sts	0x03D4, r25
     3bc:	80 93 d3 03 	sts	0x03D3, r24
SerialTxSem=OSSemCreate(1);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 c9 10 	call	0x2192	; 0x2192 <OSSemCreate>
     3c8:	90 93 96 04 	sts	0x0496, r25
     3cc:	80 93 95 04 	sts	0x0495, r24
HeartMBox=OSMboxCreate((void *)0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <OSMboxCreate>
     3d8:	90 93 d0 03 	sts	0x03D0, r25
     3dc:	80 93 cf 03 	sts	0x03CF, r24
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	46 e9       	ldi	r20, 0x96	; 150
     3e4:	55 e0       	ldi	r21, 0x05	; 5
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	8c ef       	ldi	r24, 0xFC	; 252
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>

    OSStart();                                             /* Start multitasking                       */
     3f2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <OSStart>

	while (1)
	{
		;
	}
     3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <main+0x66>

000003f8 <TaskStart>:
 *********************************************************************************************************
 *                                              STARTUP TASK
 *********************************************************************************************************
 */
void TaskStart (void *pdata)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <TaskStart+0x6>
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
    pdata = pdata;                                         /* Prevent compiler warning                 */

	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     406:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <OSStatInit>

	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 8);
     40a:	28 e0       	ldi	r18, 0x08	; 8
     40c:	44 e5       	ldi	r20, 0x54	; 84
     40e:	54 e0       	ldi	r21, 0x04	; 4
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	86 e3       	ldi	r24, 0x36	; 54
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>
	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 20);
     41c:	24 e1       	ldi	r18, 0x14	; 20
     41e:	46 e5       	ldi	r20, 0x56	; 86
     420:	55 e0       	ldi	r21, 0x05	; 5
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	87 eb       	ldi	r24, 0xB7	; 183
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>
	//PORTB |= _BV(PORTB5);
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 10);
     42e:	2a e0       	ldi	r18, 0x0A	; 10
     430:	46 e1       	ldi	r20, 0x16	; 22
     432:	55 e0       	ldi	r21, 0x05	; 5
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	88 e1       	ldi	r24, 0x18	; 24
     43a:	94 e0       	ldi	r25, 0x04	; 4
     43c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>
	OSTaskCreate(BlueToothTask, (void *) 0, &TaskBluetooth[TASK_STK_SIZE - 1], 30);
     440:	2e e1       	ldi	r18, 0x1E	; 30
     442:	44 e9       	ldi	r20, 0x94	; 148
     444:	54 e0       	ldi	r21, 0x04	; 4
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	8f e7       	ldi	r24, 0x7F	; 127
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>
	
    for (;;) {
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     452:	10 92 a1 05 	sts	0x05A1, r1
     456:	10 92 a2 05 	sts	0x05A2, r1
     45a:	10 92 a3 05 	sts	0x05A3, r1
     45e:	10 92 a4 05 	sts	0x05A4, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     462:	88 ec       	ldi	r24, 0xC8	; 200
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
    }
     46a:	f3 cf       	rjmp	.-26     	; 0x452 <TaskStart+0x5a>

0000046c <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void TimerTask (void *pdata)
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	6f 97       	sbiw	r28, 0x1f	; 31
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	9f 8f       	std	Y+31, r25	; 0x1f
     482:	8e 8f       	std	Y+30, r24	; 0x1e
	INT8U msg1;
	INT16U Message;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	char meep=MEDIUM_PRIORITY_ERROR;
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	89 83       	std	Y+1, r24	; 0x01
	int *pmeep=meep;
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9b 83       	std	Y+3, r25	; 0x03
     490:	8a 83       	std	Y+2, r24	; 0x02
	char smeep=HIGH_PRIORITY_ERROR;	
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	8c 83       	std	Y+4, r24	; 0x04
	char neep=NO_SYSTEM_ERROR;	
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	8d 83       	std	Y+5, r24	; 0x05
	char p;
    for (;;) {
		
 		OSMboxPost(LedMBox, (void *)neep); //No system error message (1)
     49a:	8d 81       	ldd	r24, Y+5	; 0x05
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9c 01       	movw	r18, r24
     4a2:	80 91 cd 03 	lds	r24, 0x03CD
     4a6:	90 91 ce 03 	lds	r25, 0x03CE
     4aa:	b9 01       	movw	r22, r18
     4ac:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
		 
		strcpy(TextMessage, "No error state \r\n");
     4b0:	ce 01       	movw	r24, r28
     4b2:	06 96       	adiw	r24, 0x06	; 6
     4b4:	22 e1       	ldi	r18, 0x12	; 18
     4b6:	e4 e0       	ldi	r30, 0x04	; 4
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	dc 01       	movw	r26, r24
     4bc:	01 90       	ld	r0, Z+
     4be:	0d 92       	st	X+, r0
     4c0:	2a 95       	dec	r18
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <TimerTask+0x50>
		OSMboxPost(SerialTxMBox,(void *)TextMessage);
     4c4:	80 91 d3 03 	lds	r24, 0x03D3
     4c8:	90 91 d4 03 	lds	r25, 0x03D4
     4cc:	9e 01       	movw	r18, r28
     4ce:	2a 5f       	subi	r18, 0xFA	; 250
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	b9 01       	movw	r22, r18
     4d4:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
		
 		OSTimeDly(OS_TICKS_PER_SEC*5);
     4d8:	88 ee       	ldi	r24, 0xE8	; 232
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
		 
		OSMboxPost(LedMBox, (void *)smeep); //high priority error (3)
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	9c 01       	movw	r18, r24
     4e8:	80 91 cd 03 	lds	r24, 0x03CD
     4ec:	90 91 ce 03 	lds	r25, 0x03CE
     4f0:	b9 01       	movw	r22, r18
     4f2:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
		strcpy(TextMessage, "High error state \r\n");
     4f6:	ce 01       	movw	r24, r28
     4f8:	06 96       	adiw	r24, 0x06	; 6
     4fa:	24 e1       	ldi	r18, 0x14	; 20
     4fc:	e6 e1       	ldi	r30, 0x16	; 22
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	dc 01       	movw	r26, r24
     502:	01 90       	ld	r0, Z+
     504:	0d 92       	st	X+, r0
     506:	2a 95       	dec	r18
     508:	e1 f7       	brne	.-8      	; 0x502 <TimerTask+0x96>
		OSMboxPost(SerialTxMBox,(void *)TextMessage);
     50a:	80 91 d3 03 	lds	r24, 0x03D3
     50e:	90 91 d4 03 	lds	r25, 0x03D4
     512:	9e 01       	movw	r18, r28
     514:	2a 5f       	subi	r18, 0xFA	; 250
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	b9 01       	movw	r22, r18
     51a:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
 		OSTimeDly(OS_TICKS_PER_SEC*5);
     51e:	88 ee       	ldi	r24, 0xE8	; 232
     520:	93 e0       	ldi	r25, 0x03	; 3
     522:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
 		OSMboxPost(LedMBox, (void *)meep); //medium priority error (2)
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	88 2f       	mov	r24, r24
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	9c 01       	movw	r18, r24
     52e:	80 91 cd 03 	lds	r24, 0x03CD
     532:	90 91 ce 03 	lds	r25, 0x03CE
     536:	b9 01       	movw	r22, r18
     538:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
		 strcpy(TextMessage, "Medium error state \r\n");
     53c:	ce 01       	movw	r24, r28
     53e:	06 96       	adiw	r24, 0x06	; 6
     540:	26 e1       	ldi	r18, 0x16	; 22
     542:	ea e2       	ldi	r30, 0x2A	; 42
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	dc 01       	movw	r26, r24
     548:	01 90       	ld	r0, Z+
     54a:	0d 92       	st	X+, r0
     54c:	2a 95       	dec	r18
     54e:	e1 f7       	brne	.-8      	; 0x548 <TimerTask+0xdc>
		 OSMboxPost(SerialTxMBox,(void *)TextMessage);
     550:	80 91 d3 03 	lds	r24, 0x03D3
     554:	90 91 d4 03 	lds	r25, 0x03D4
     558:	9e 01       	movw	r18, r28
     55a:	2a 5f       	subi	r18, 0xFA	; 250
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	b9 01       	movw	r22, r18
     560:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
		OSTimeDly(OS_TICKS_PER_SEC*5);
     564:	88 ee       	ldi	r24, 0xE8	; 232
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
	
	}
     56c:	96 cf       	rjmp	.-212    	; 0x49a <TimerTask+0x2e>

0000056e <LedTask>:
 *                                                 LED TASK
 *********************************************************************************************************
 */

void LedTask (void *pdata)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	62 97       	sbiw	r28, 0x12	; 18
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	9a 8b       	std	Y+18, r25	; 0x12
     584:	89 8b       	std	Y+17, r24	; 0x11
	INT8U msg1;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
     586:	84 e1       	ldi	r24, 0x14	; 20
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	9a 87       	std	Y+10, r25	; 0x0a
     58c:	89 87       	std	Y+9, r24	; 0x09
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
     58e:	28 ec       	ldi	r18, 0xC8	; 200
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	89 85       	ldd	r24, Y+9	; 0x09
     594:	9a 85       	ldd	r25, Y+10	; 0x0a
     596:	a9 01       	movw	r20, r18
     598:	48 1b       	sub	r20, r24
     59a:	59 0b       	sbc	r21, r25
     59c:	ca 01       	movw	r24, r20
     59e:	9c 87       	std	Y+12, r25	; 0x0c
     5a0:	8b 87       	std	Y+11, r24	; 0x0b
	//INT8U	LocalMessage = NO_SYSTEM_ERROR;
	char mwwp;
	float on;float off;

    for (;;) {
	 msg1=OSMboxAccept(LedMBox);
     5a2:	80 91 cd 03 	lds	r24, 0x03CD
     5a6:	90 91 ce 03 	lds	r25, 0x03CE
     5aa:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <OSMboxAccept>
     5ae:	8d 87       	std	Y+13, r24	; 0x0d
	 switch(msg1){
     5b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	91 05       	cpc	r25, r1
     5ba:	09 f4       	brne	.+2      	; 0x5be <LedTask+0x50>
     5bc:	ac c0       	rjmp	.+344    	; 0x716 <LedTask+0x1a8>
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	91 05       	cpc	r25, r1
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <LedTask+0x58>
     5c4:	56 c0       	rjmp	.+172    	; 0x672 <LedTask+0x104>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	91 05       	cpc	r25, r1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <LedTask+0x60>
     5cc:	ee c0       	rjmp	.+476    	; 0x7aa <LedTask+0x23c>
		 case NO_SYSTEM_ERROR:
			on=.1;
     5ce:	8d ec       	ldi	r24, 0xCD	; 205
     5d0:	9c ec       	ldi	r25, 0xCC	; 204
     5d2:	ac ec       	ldi	r26, 0xCC	; 204
     5d4:	bd e3       	ldi	r27, 0x3D	; 61
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	ab 83       	std	Y+3, r26	; 0x03
     5dc:	bc 83       	std	Y+4, r27	; 0x04
			off=1-.1;
     5de:	86 e6       	ldi	r24, 0x66	; 102
     5e0:	96 e6       	ldi	r25, 0x66	; 102
     5e2:	a6 e6       	ldi	r26, 0x66	; 102
     5e4:	bf e3       	ldi	r27, 0x3F	; 63
     5e6:	8d 83       	std	Y+5, r24	; 0x05
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	af 83       	std	Y+7, r26	; 0x07
     5ec:	b8 87       	std	Y+8, r27	; 0x08
			//USART_TX_Poll('p');
			strcpy(mwwp,(char *)msg);
     5ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	2f 85       	ldd	r18, Y+15	; 0x0f
     5f6:	38 89       	ldd	r19, Y+16	; 0x10
     5f8:	b9 01       	movw	r22, r18
     5fa:	0e 94 a6 14 	call	0x294c	; 0x294c <strcpy>
 			PORTB |= (_BV(PORTB5));
     5fe:	85 e2       	ldi	r24, 0x25	; 37
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	25 e2       	ldi	r18, 0x25	; 37
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	f9 01       	movw	r30, r18
     608:	20 81       	ld	r18, Z
     60a:	20 62       	ori	r18, 0x20	; 32
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
 			OSTimeDly(OS_TICKS_PER_SEC*on);
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	48 e4       	ldi	r20, 0x48	; 72
     616:	53 e4       	ldi	r21, 0x43	; 67
     618:	69 81       	ldd	r22, Y+1	; 0x01
     61a:	7a 81       	ldd	r23, Y+2	; 0x02
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	bc 01       	movw	r22, r24
     62a:	cd 01       	movw	r24, r26
     62c:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
 			PORTB &= !(_BV(PORTB5));
     638:	85 e2       	ldi	r24, 0x25	; 37
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	fc 01       	movw	r30, r24
     63e:	80 81       	ld	r24, Z
     640:	85 e2       	ldi	r24, 0x25	; 37
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	fc 01       	movw	r30, r24
     646:	10 82       	st	Z, r1
 			OSTimeDly(OS_TICKS_PER_SEC*(off));
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	48 e4       	ldi	r20, 0x48	; 72
     64e:	53 e4       	ldi	r21, 0x43	; 67
     650:	6d 81       	ldd	r22, Y+5	; 0x05
     652:	7e 81       	ldd	r23, Y+6	; 0x06
     654:	8f 81       	ldd	r24, Y+7	; 0x07
     656:	98 85       	ldd	r25, Y+8	; 0x08
     658:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	bc 01       	movw	r22, r24
     662:	cd 01       	movw	r24, r26
     664:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
		 break;
     670:	de c0       	rjmp	.+444    	; 0x82e <LedTask+0x2c0>
		 case HIGH_PRIORITY_ERROR:
			strcpy(mwwp,(char *)msg);
     672:	8e 85       	ldd	r24, Y+14	; 0x0e
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2f 85       	ldd	r18, Y+15	; 0x0f
     67a:	38 89       	ldd	r19, Y+16	; 0x10
     67c:	b9 01       	movw	r22, r18
     67e:	0e 94 a6 14 	call	0x294c	; 0x294c <strcpy>
			on=.2;
     682:	8d ec       	ldi	r24, 0xCD	; 205
     684:	9c ec       	ldi	r25, 0xCC	; 204
     686:	ac e4       	ldi	r26, 0x4C	; 76
     688:	be e3       	ldi	r27, 0x3E	; 62
     68a:	89 83       	std	Y+1, r24	; 0x01
     68c:	9a 83       	std	Y+2, r25	; 0x02
     68e:	ab 83       	std	Y+3, r26	; 0x03
     690:	bc 83       	std	Y+4, r27	; 0x04
			off=.2;
     692:	8d ec       	ldi	r24, 0xCD	; 205
     694:	9c ec       	ldi	r25, 0xCC	; 204
     696:	ac e4       	ldi	r26, 0x4C	; 76
     698:	be e3       	ldi	r27, 0x3E	; 62
     69a:	8d 83       	std	Y+5, r24	; 0x05
     69c:	9e 83       	std	Y+6, r25	; 0x06
     69e:	af 83       	std	Y+7, r26	; 0x07
     6a0:	b8 87       	std	Y+8, r27	; 0x08
 			PORTB |= (_BV(PORTB5));
     6a2:	85 e2       	ldi	r24, 0x25	; 37
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	25 e2       	ldi	r18, 0x25	; 37
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	f9 01       	movw	r30, r18
     6ac:	20 81       	ld	r18, Z
     6ae:	20 62       	ori	r18, 0x20	; 32
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
 			OSTimeDly(OS_TICKS_PER_SEC*on);
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	48 e4       	ldi	r20, 0x48	; 72
     6ba:	53 e4       	ldi	r21, 0x43	; 67
     6bc:	69 81       	ldd	r22, Y+1	; 0x01
     6be:	7a 81       	ldd	r23, Y+2	; 0x02
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	9c 81       	ldd	r25, Y+4	; 0x04
     6c4:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	bc 01       	movw	r22, r24
     6ce:	cd 01       	movw	r24, r26
     6d0:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
 			PORTB &= !(_BV(PORTB5));
     6dc:	85 e2       	ldi	r24, 0x25	; 37
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	85 e2       	ldi	r24, 0x25	; 37
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	10 82       	st	Z, r1
 			OSTimeDly(OS_TICKS_PER_SEC*(off));
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	48 e4       	ldi	r20, 0x48	; 72
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	6d 81       	ldd	r22, Y+5	; 0x05
     6f6:	7e 81       	ldd	r23, Y+6	; 0x06
     6f8:	8f 81       	ldd	r24, Y+7	; 0x07
     6fa:	98 85       	ldd	r25, Y+8	; 0x08
     6fc:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	bc 01       	movw	r22, r24
     706:	cd 01       	movw	r24, r26
     708:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
// 			off=1.2;
// 			PORTB |= (_BV(PORTB5));
//  			OSTimeDly(OS_TICKS_PER_SEC*on);
//  			PORTB &= !(_BV(PORTB5));
//  			OSTimeDly(OS_TICKS_PER_SEC*(off));
		 break;
     714:	8c c0       	rjmp	.+280    	; 0x82e <LedTask+0x2c0>
		 case MEDIUM_PRIORITY_ERROR:
		 	on=1.2;
     716:	8a e9       	ldi	r24, 0x9A	; 154
     718:	99 e9       	ldi	r25, 0x99	; 153
     71a:	a9 e9       	ldi	r26, 0x99	; 153
     71c:	bf e3       	ldi	r27, 0x3F	; 63
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	9a 83       	std	Y+2, r25	; 0x02
     722:	ab 83       	std	Y+3, r26	; 0x03
     724:	bc 83       	std	Y+4, r27	; 0x04
			off=1.2;
     726:	8a e9       	ldi	r24, 0x9A	; 154
     728:	99 e9       	ldi	r25, 0x99	; 153
     72a:	a9 e9       	ldi	r26, 0x99	; 153
     72c:	bf e3       	ldi	r27, 0x3F	; 63
     72e:	8d 83       	std	Y+5, r24	; 0x05
     730:	9e 83       	std	Y+6, r25	; 0x06
     732:	af 83       	std	Y+7, r26	; 0x07
     734:	b8 87       	std	Y+8, r27	; 0x08
			PORTB |= (_BV(PORTB5));
     736:	85 e2       	ldi	r24, 0x25	; 37
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	25 e2       	ldi	r18, 0x25	; 37
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	20 62       	ori	r18, 0x20	; 32
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
 			OSTimeDly(OS_TICKS_PER_SEC*on);
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	48 e4       	ldi	r20, 0x48	; 72
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	7a 81       	ldd	r23, Y+2	; 0x02
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	bc 01       	movw	r22, r24
     762:	cd 01       	movw	r24, r26
     764:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
 			PORTB &= !(_BV(PORTB5));
     770:	85 e2       	ldi	r24, 0x25	; 37
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	85 e2       	ldi	r24, 0x25	; 37
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	10 82       	st	Z, r1
 			OSTimeDly(OS_TICKS_PER_SEC*(off));
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	48 e4       	ldi	r20, 0x48	; 72
     786:	53 e4       	ldi	r21, 0x43	; 67
     788:	6d 81       	ldd	r22, Y+5	; 0x05
     78a:	7e 81       	ldd	r23, Y+6	; 0x06
     78c:	8f 81       	ldd	r24, Y+7	; 0x07
     78e:	98 85       	ldd	r25, Y+8	; 0x08
     790:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	bc 01       	movw	r22, r24
     79a:	cd 01       	movw	r24, r26
     79c:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
// 			off=.2;
//  			PORTB |= (_BV(PORTB5));
//  			OSTimeDly(OS_TICKS_PER_SEC*on);
//  			PORTB &= !(_BV(PORTB5));
//  			OSTimeDly(OS_TICKS_PER_SEC*(off));
		 break;
     7a8:	42 c0       	rjmp	.+132    	; 0x82e <LedTask+0x2c0>
		 default:
			strcpy(mwwp,(char *)msg);
     7aa:	8e 85       	ldd	r24, Y+14	; 0x0e
     7ac:	88 2f       	mov	r24, r24
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	2f 85       	ldd	r18, Y+15	; 0x0f
     7b2:	38 89       	ldd	r19, Y+16	; 0x10
     7b4:	b9 01       	movw	r22, r18
     7b6:	0e 94 a6 14 	call	0x294c	; 0x294c <strcpy>
 			PORTB |= (_BV(PORTB5));
     7ba:	85 e2       	ldi	r24, 0x25	; 37
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	25 e2       	ldi	r18, 0x25	; 37
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	20 81       	ld	r18, Z
     7c6:	20 62       	ori	r18, 0x20	; 32
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
 			OSTimeDly(OS_TICKS_PER_SEC*on);
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	48 e4       	ldi	r20, 0x48	; 72
     7d2:	53 e4       	ldi	r21, 0x43	; 67
     7d4:	69 81       	ldd	r22, Y+1	; 0x01
     7d6:	7a 81       	ldd	r23, Y+2	; 0x02
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	9c 81       	ldd	r25, Y+4	; 0x04
     7dc:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
 			PORTB &= !(_BV(PORTB5));
     7f4:	85 e2       	ldi	r24, 0x25	; 37
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	85 e2       	ldi	r24, 0x25	; 37
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	fc 01       	movw	r30, r24
     802:	10 82       	st	Z, r1
 			OSTimeDly(OS_TICKS_PER_SEC*(off));
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	48 e4       	ldi	r20, 0x48	; 72
     80a:	53 e4       	ldi	r21, 0x43	; 67
     80c:	6d 81       	ldd	r22, Y+5	; 0x05
     80e:	7e 81       	ldd	r23, Y+6	; 0x06
     810:	8f 81       	ldd	r24, Y+7	; 0x07
     812:	98 85       	ldd	r25, Y+8	; 0x08
     814:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
		 break;
     82c:	00 00       	nop
		 
		 }

	 }
     82e:	b9 ce       	rjmp	.-654    	; 0x5a2 <LedTask+0x34>

00000830 <SerialTransmitTask>:
 *********************************************************************************************************
 *                                       Serial Transmission Task
 *********************************************************************************************************
 */
void SerialTransmitTask (void *pdata)
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	a0 97       	sbiw	r28, 0x20	; 32
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	98 a3       	std	Y+32, r25	; 0x20
     846:	8f 8f       	std	Y+31, r24	; 0x1f
	//USART_TX_Poll('b');
	INT8U err;
//PORTB |= (_BV(PORTB5));
	void *msg;
	INT8U CharCounter=0;
     848:	19 82       	std	Y+1, r1	; 0x01
	INT16U StringLength;
	char LocalMessage[TRANSMIT_BUFFER_SIZE];
	//LocalMessage=OSMboxAccept(SerialTxMBox);
	
	for(;;){
	msg=OSMboxPend(SerialTxMBox,0,&err);
     84a:	80 91 d3 03 	lds	r24, 0x03D3
     84e:	90 91 d4 03 	lds	r25, 0x03D4
     852:	9e 01       	movw	r18, r28
     854:	2a 5f       	subi	r18, 0xFA	; 250
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	a9 01       	movw	r20, r18
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <OSMboxPend>
     862:	9b 83       	std	Y+3, r25	; 0x03
     864:	8a 83       	std	Y+2, r24	; 0x02
	strcpy(LocalMessage,(char*)msg );
     866:	2a 81       	ldd	r18, Y+2	; 0x02
     868:	3b 81       	ldd	r19, Y+3	; 0x03
     86a:	ce 01       	movw	r24, r28
     86c:	07 96       	adiw	r24, 0x07	; 7
     86e:	b9 01       	movw	r22, r18
     870:	0e 94 a6 14 	call	0x294c	; 0x294c <strcpy>
 	StringLength=sizeof(LocalMessage);
     874:	88 e1       	ldi	r24, 0x18	; 24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	9d 83       	std	Y+5, r25	; 0x05
     87a:	8c 83       	std	Y+4, r24	; 0x04
	 
		extern SerTxISR();
	SerTxISR();
     87c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <SerTxISR>
 	//OSTimeDly(OS_TICKS_PER_SEC*5);
	for (CharCounter=0;CharCounter<StringLength;CharCounter++) {
     880:	19 82       	std	Y+1, r1	; 0x01
     882:	24 c0       	rjmp	.+72     	; 0x8cc <SerialTransmitTask+0x9c>
		PORTB |= (_BV(PORTB4));
     884:	85 e2       	ldi	r24, 0x25	; 37
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	25 e2       	ldi	r18, 0x25	; 37
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	20 61       	ori	r18, 0x10	; 16
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
		OSSemPend(SerialTxSem,0,&err);
     896:	80 91 95 04 	lds	r24, 0x0495
     89a:	90 91 96 04 	lds	r25, 0x0496
     89e:	9e 01       	movw	r18, r28
     8a0:	2a 5f       	subi	r18, 0xFA	; 250
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	a9 01       	movw	r20, r18
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	0e 94 07 11 	call	0x220e	; 0x220e <OSSemPend>
		PORTB &= !(_BV(PORTB4));
     8ae:	85 e2       	ldi	r24, 0x25	; 37
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	80 81       	ld	r24, Z
     8b6:	85 e2       	ldi	r24, 0x25	; 37
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fc 01       	movw	r30, r24
     8bc:	10 82       	st	Z, r1
		//UDR0=LocalMessage[CharCounter];
		OSTimeDly(OS_TICKS_PER_SEC/200);
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
 	StringLength=sizeof(LocalMessage);
	 
		extern SerTxISR();
	SerTxISR();
 	//OSTimeDly(OS_TICKS_PER_SEC*5);
	for (CharCounter=0;CharCounter<StringLength;CharCounter++) {
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	28 2f       	mov	r18, r24
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	9d 81       	ldd	r25, Y+5	; 0x05
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	a0 f2       	brcs	.-88     	; 0x884 <SerialTransmitTask+0x54>
		//USART_TX_Poll(LocalMessage[CharCounter]);
		//USART_TX_Poll('a');
		//OSTimeDly(OS_TICKS_PER_SEC/10);
	}
	extern	EndISR();
	EndISR();
     8dc:	0e 94 c6 01 	call	0x38c	; 0x38c <EndISR>
	}
     8e0:	b4 cf       	rjmp	.-152    	; 0x84a <SerialTransmitTask+0x1a>

000008e2 <PostTxCompleteSem>:
 *********************************************************************************************************
 *                        Routine to Post the Transmit buffer empty semaphone
 *********************************************************************************************************
 */
void PostTxCompleteSem (void)
{
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
	OSSemPost(SerialTxSem);
     8ea:	80 91 95 04 	lds	r24, 0x0495
     8ee:	90 91 96 04 	lds	r25, 0x0496
     8f2:	0e 94 90 11 	call	0x2320	; 0x2320 <OSSemPost>
	return;
     8f6:	00 00       	nop
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <BlueToothTask>:

void BlueToothTask(void* pdata)
{
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	e1 97       	sbiw	r28, 0x31	; 49
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	99 ab       	std	Y+49, r25	; 0x31
     920:	88 ab       	std	Y+48, r24	; 0x30
	OS_ENTER_CRITICAL();
     922:	f8 94       	cli
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // ADC control and status register, prescalar at 128 for a 125 kHz clock source
     924:	8a e7       	ldi	r24, 0x7A	; 122
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2a e7       	ldi	r18, 0x7A	; 122
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	27 60       	ori	r18, 0x07	; 7
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0); // setup mux pin
     936:	8c e7       	ldi	r24, 0x7C	; 124
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	2c e7       	ldi	r18, 0x7C	; 124
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	20 64       	ori	r18, 0x40	; 64
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
	ADMUX &= ~(1 << REFS1); //+5 V reference voltage
     948:	8c e7       	ldi	r24, 0x7C	; 124
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2c e7       	ldi	r18, 0x7C	; 124
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	f9 01       	movw	r30, r18
     952:	20 81       	ld	r18, Z
     954:	2f 77       	andi	r18, 0x7F	; 127
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
	ADCSRB &= ~((1 << ADTS2) | (1 << ADTS1) | (1 << ADTS0)); //?
     95a:	8b e7       	ldi	r24, 0x7B	; 123
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	2b e7       	ldi	r18, 0x7B	; 123
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	f9 01       	movw	r30, r18
     964:	20 81       	ld	r18, Z
     966:	28 7f       	andi	r18, 0xF8	; 248
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
	ADCSRA |= (1<< ADATE);  //?
     96c:	8a e7       	ldi	r24, 0x7A	; 122
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	2a e7       	ldi	r18, 0x7A	; 122
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	20 62       	ori	r18, 0x20	; 32
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
	ADCSRA |= (1<< ADEN); //Powerup ADC
     97e:	8a e7       	ldi	r24, 0x7A	; 122
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	2a e7       	ldi	r18, 0x7A	; 122
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	20 68       	ori	r18, 0x80	; 128
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
	ADCSRA |= (1<< ADSC); //Start Conversion 
     990:	8a e7       	ldi	r24, 0x7A	; 122
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2a e7       	ldi	r18, 0x7A	; 122
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	20 64       	ori	r18, 0x40	; 64
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
	static int beats =0; //how many beats there were in the 6 second period
	static float timer = 0; //time in seconds
	static float lastEvent = 0; //last event time in seconds
	static int used = 0;
	char LocalMessage[TRANSMIT_BUFFER_SIZE];
	char b1 = bpm_1; //i only know how to mbox post these kind of messages
     9a2:	8c e3       	ldi	r24, 0x3C	; 60
     9a4:	89 83       	std	Y+1, r24	; 0x01
	char b2 = bpm_2;
     9a6:	88 e7       	ldi	r24, 0x78	; 120
     9a8:	8a 83       	std	Y+2, r24	; 0x02
	char b3 = bpm_3;
     9aa:	82 e8       	ldi	r24, 0x82	; 130
     9ac:	8b 83       	std	Y+3, r24	; 0x03
	char b4 = bpm_4;
     9ae:	8c e8       	ldi	r24, 0x8C	; 140
     9b0:	8c 83       	std	Y+4, r24	; 0x04
	char b5 = bpm_5;
     9b2:	86 e9       	ldi	r24, 0x96	; 150
     9b4:	8d 83       	std	Y+5, r24	; 0x05
	char b6 = bpm_6;
     9b6:	80 ea       	ldi	r24, 0xA0	; 160
     9b8:	8e 83       	std	Y+6, r24	; 0x06
	char b7 = bpm_7;
     9ba:	8a ea       	ldi	r24, 0xAA	; 170
     9bc:	8f 83       	std	Y+7, r24	; 0x07
	char b8 = bpm_8;
     9be:	84 eb       	ldi	r24, 0xB4	; 180
     9c0:	88 87       	std	Y+8, r24	; 0x08
	char b9 = bpm_9;			
     9c2:	8e eb       	ldi	r24, 0xBE	; 190
     9c4:	89 87       	std	Y+9, r24	; 0x09
	for(;;)
	{
		adcValue = ADCL | (ADCH << 8); //reads in Voltage value on Analog in, port 0 (PORTC0)
     9c6:	88 e7       	ldi	r24, 0x78	; 120
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	fc 01       	movw	r30, r24
     9cc:	80 81       	ld	r24, Z
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	89 e7       	ldi	r24, 0x79	; 121
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	fc 01       	movw	r30, r24
     9d8:	80 81       	ld	r24, Z
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	98 2f       	mov	r25, r24
     9e0:	88 27       	eor	r24, r24
     9e2:	82 2b       	or	r24, r18
     9e4:	93 2b       	or	r25, r19
     9e6:	90 93 89 02 	sts	0x0289, r25
     9ea:	80 93 88 02 	sts	0x0288, r24
		//oldAcc = adcAcc;
		adcAcc = (float)(adcValue) *(5.0/1023.0); //converts voltage to real voltage range(5v max)
     9ee:	80 91 88 02 	lds	r24, 0x0288
     9f2:	90 91 89 02 	lds	r25, 0x0289
     9f6:	aa 27       	eor	r26, r26
     9f8:	97 fd       	sbrc	r25, 7
     9fa:	a0 95       	com	r26
     9fc:	ba 2f       	mov	r27, r26
     9fe:	bc 01       	movw	r22, r24
     a00:	cd 01       	movw	r24, r26
     a02:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__floatsisf>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	2a e0       	ldi	r18, 0x0A	; 10
     a0c:	38 e2       	ldi	r19, 0x28	; 40
     a0e:	40 ea       	ldi	r20, 0xA0	; 160
     a10:	5b e3       	ldi	r21, 0x3B	; 59
     a12:	bc 01       	movw	r22, r24
     a14:	cd 01       	movw	r24, r26
     a16:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	80 93 00 01 	sts	0x0100, r24
     a22:	90 93 01 01 	sts	0x0101, r25
     a26:	a0 93 02 01 	sts	0x0102, r26
     a2a:	b0 93 03 01 	sts	0x0103, r27
		//take derivative to find points of large change
		//deriv = (adcAcc-oldAcc)/SAMPLERATE;
		//if(deriv < 0.1) deriv = 0; //truncate small values
		if(inBlanking)
     a2e:	80 91 8a 02 	lds	r24, 0x028A
     a32:	90 91 8b 02 	lds	r25, 0x028B
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	31 f1       	breq	.+76     	; 0xa86 <__stack+0x187>
		{ //Is currently in refractory period
			if(timer - lastEvent > BLANKINGPERIOD/1000.0f ) //wait until the last event is at least (BLANKINGPERIOD) seconds old
     a3a:	80 91 8c 02 	lds	r24, 0x028C
     a3e:	90 91 8d 02 	lds	r25, 0x028D
     a42:	a0 91 8e 02 	lds	r26, 0x028E
     a46:	b0 91 8f 02 	lds	r27, 0x028F
     a4a:	20 91 90 02 	lds	r18, 0x0290
     a4e:	30 91 91 02 	lds	r19, 0x0291
     a52:	40 91 92 02 	lds	r20, 0x0292
     a56:	50 91 93 02 	lds	r21, 0x0293
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	0e 94 b7 12 	call	0x256e	; 0x256e <__subsf3>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	2d ec       	ldi	r18, 0xCD	; 205
     a68:	3c ec       	ldi	r19, 0xCC	; 204
     a6a:	4c ec       	ldi	r20, 0xCC	; 204
     a6c:	5d e3       	ldi	r21, 0x3D	; 61
     a6e:	bc 01       	movw	r22, r24
     a70:	cd 01       	movw	r24, r26
     a72:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
     a76:	18 16       	cp	r1, r24
     a78:	0c f0       	brlt	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	b3 c1       	rjmp	.+870    	; 0xde2 <__stack+0x4e3>
				inBlanking = 0;
     a7c:	10 92 8b 02 	sts	0x028B, r1
     a80:	10 92 8a 02 	sts	0x028A, r1
     a84:	ae c1       	rjmp	.+860    	; 0xde2 <__stack+0x4e3>
		}
		// check if event occurred
		else if(adcAcc > THRESHOLD )
     a86:	80 91 00 01 	lds	r24, 0x0100
     a8a:	90 91 01 01 	lds	r25, 0x0101
     a8e:	a0 91 02 01 	lds	r26, 0x0102
     a92:	b0 91 03 01 	lds	r27, 0x0103
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e2       	ldi	r20, 0x20	; 32
     a9c:	50 e4       	ldi	r21, 0x40	; 64
     a9e:	bc 01       	movw	r22, r24
     aa0:	cd 01       	movw	r24, r26
     aa2:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
     aa6:	18 16       	cp	r1, r24
     aa8:	0c f0       	brlt	.+2      	; 0xaac <__stack+0x1ad>
     aaa:	9b c1       	rjmp	.+822    	; 0xde2 <__stack+0x4e3>
		{//||((int)timer % 3) == 0 ) {//called once every 6 secs
			if(1 || used ==0)
			{
				//printf("EVENT at: %d\n",(int)timer);
				used = 1; // was this function called last sample
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	90 93 95 02 	sts	0x0295, r25
     ab4:	80 93 94 02 	sts	0x0294, r24
				inBlanking = 1; //event is called, start blanking
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	90 93 8b 02 	sts	0x028B, r25
     ac0:	80 93 8a 02 	sts	0x028A, r24
				lastEvent = timer;
     ac4:	80 91 8c 02 	lds	r24, 0x028C
     ac8:	90 91 8d 02 	lds	r25, 0x028D
     acc:	a0 91 8e 02 	lds	r26, 0x028E
     ad0:	b0 91 8f 02 	lds	r27, 0x028F
     ad4:	80 93 90 02 	sts	0x0290, r24
     ad8:	90 93 91 02 	sts	0x0291, r25
     adc:	a0 93 92 02 	sts	0x0292, r26
     ae0:	b0 93 93 02 	sts	0x0293, r27
				buffer[++b_end_index] = lastEvent; //sets current rolling buffer index to the most recent event timestamp
     ae4:	80 91 86 02 	lds	r24, 0x0286
     ae8:	90 91 87 02 	lds	r25, 0x0287
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	90 93 87 02 	sts	0x0287, r25
     af2:	80 93 86 02 	sts	0x0286, r24
     af6:	00 91 86 02 	lds	r16, 0x0286
     afa:	10 91 87 02 	lds	r17, 0x0287
     afe:	80 91 90 02 	lds	r24, 0x0290
     b02:	90 91 91 02 	lds	r25, 0x0291
     b06:	a0 91 92 02 	lds	r26, 0x0292
     b0a:	b0 91 93 02 	lds	r27, 0x0293
     b0e:	bc 01       	movw	r22, r24
     b10:	cd 01       	movw	r24, r26
     b12:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixsfsi>
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	9c 01       	movw	r18, r24
     b1c:	c8 01       	movw	r24, r16
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	88 5b       	subi	r24, 0xB8	; 184
     b24:	9d 4f       	sbci	r25, 0xFD	; 253
     b26:	fc 01       	movw	r30, r24
     b28:	31 83       	std	Z+1, r19	; 0x01
     b2a:	20 83       	st	Z, r18
    
				if(b_end_index >= NSAMPLES-1)
     b2c:	80 91 86 02 	lds	r24, 0x0286
     b30:	90 91 87 02 	lds	r25, 0x0287
     b34:	8d 31       	cpi	r24, 0x1D	; 29
     b36:	91 05       	cpc	r25, r1
     b38:	24 f0       	brlt	.+8      	; 0xb42 <__stack+0x243>
					b_end_index = 0; //if end index is out of bounds, set it back to 0
     b3a:	10 92 87 02 	sts	0x0287, r1
     b3e:	10 92 86 02 	sts	0x0286, r1
				if(b_end_index == b_start_index)
     b42:	20 91 86 02 	lds	r18, 0x0286
     b46:	30 91 87 02 	lds	r19, 0x0287
     b4a:	80 91 84 02 	lds	r24, 0x0284
     b4e:	90 91 85 02 	lds	r25, 0x0285
     b52:	28 17       	cp	r18, r24
     b54:	39 07       	cpc	r19, r25
     b56:	51 f4       	brne	.+20     	; 0xb6c <__stack+0x26d>
					b_start_index++; //if end index reaches the start index (it shouldn't normally), it increases start index to prevent weird behavior
     b58:	80 91 84 02 	lds	r24, 0x0284
     b5c:	90 91 85 02 	lds	r25, 0x0285
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	90 93 85 02 	sts	0x0285, r25
     b66:	80 93 84 02 	sts	0x0284, r24
    
				while((buffer[b_start_index] +6.1 < (int)timer) && b_start_index != b_end_index)
     b6a:	0a c0       	rjmp	.+20     	; 0xb80 <__stack+0x281>
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <__stack+0x281>
				{ //while oldest event is at least 6 seconds old and start index hasn't reached most recent event
					b_start_index++; //increase start index, so that the buffer only contains events newer than 6 seconds old
     b6e:	80 91 84 02 	lds	r24, 0x0284
     b72:	90 91 85 02 	lds	r25, 0x0285
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	90 93 85 02 	sts	0x0285, r25
     b7c:	80 93 84 02 	sts	0x0284, r24
				if(b_end_index >= NSAMPLES-1)
					b_end_index = 0; //if end index is out of bounds, set it back to 0
				if(b_end_index == b_start_index)
					b_start_index++; //if end index reaches the start index (it shouldn't normally), it increases start index to prevent weird behavior
    
				while((buffer[b_start_index] +6.1 < (int)timer) && b_start_index != b_end_index)
     b80:	80 91 84 02 	lds	r24, 0x0284
     b84:	90 91 85 02 	lds	r25, 0x0285
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	88 5b       	subi	r24, 0xB8	; 184
     b8e:	9d 4f       	sbci	r25, 0xFD	; 253
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	aa 27       	eor	r26, r26
     b98:	97 fd       	sbrc	r25, 7
     b9a:	a0 95       	com	r26
     b9c:	ba 2f       	mov	r27, r26
     b9e:	bc 01       	movw	r22, r24
     ba0:	cd 01       	movw	r24, r26
     ba2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__floatsisf>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	23 e3       	ldi	r18, 0x33	; 51
     bac:	33 e3       	ldi	r19, 0x33	; 51
     bae:	43 ec       	ldi	r20, 0xC3	; 195
     bb0:	50 e4       	ldi	r21, 0x40	; 64
     bb2:	bc 01       	movw	r22, r24
     bb4:	cd 01       	movw	r24, r26
     bb6:	0e 94 b8 12 	call	0x2570	; 0x2570 <__addsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	6c 01       	movw	r12, r24
     bc0:	7d 01       	movw	r14, r26
     bc2:	80 91 8c 02 	lds	r24, 0x028C
     bc6:	90 91 8d 02 	lds	r25, 0x028D
     bca:	a0 91 8e 02 	lds	r26, 0x028E
     bce:	b0 91 8f 02 	lds	r27, 0x028F
     bd2:	bc 01       	movw	r22, r24
     bd4:	cd 01       	movw	r24, r26
     bd6:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixsfsi>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	aa 27       	eor	r26, r26
     be0:	97 fd       	sbrc	r25, 7
     be2:	a0 95       	com	r26
     be4:	ba 2f       	mov	r27, r26
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__floatsisf>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9c 01       	movw	r18, r24
     bf4:	ad 01       	movw	r20, r26
     bf6:	c7 01       	movw	r24, r14
     bf8:	b6 01       	movw	r22, r12
     bfa:	0e 94 1c 13 	call	0x2638	; 0x2638 <__cmpsf2>
     bfe:	88 23       	and	r24, r24
     c00:	64 f4       	brge	.+24     	; 0xc1a <__stack+0x31b>
     c02:	20 91 84 02 	lds	r18, 0x0284
     c06:	30 91 85 02 	lds	r19, 0x0285
     c0a:	80 91 86 02 	lds	r24, 0x0286
     c0e:	90 91 87 02 	lds	r25, 0x0287
     c12:	28 17       	cp	r18, r24
     c14:	39 07       	cpc	r19, r25
     c16:	09 f0       	breq	.+2      	; 0xc1a <__stack+0x31b>
     c18:	aa cf       	rjmp	.-172    	; 0xb6e <__stack+0x26f>
				{ //while oldest event is at least 6 seconds old and start index hasn't reached most recent event
					b_start_index++; //increase start index, so that the buffer only contains events newer than 6 seconds old
				}
       
				if(b_start_index >= NSAMPLES) //if start index is out of bounds, set it back to 0
     c1a:	80 91 84 02 	lds	r24, 0x0284
     c1e:	90 91 85 02 	lds	r25, 0x0285
     c22:	8e 31       	cpi	r24, 0x1E	; 30
     c24:	91 05       	cpc	r25, r1
     c26:	24 f0       	brlt	.+8      	; 0xc30 <__stack+0x331>
					b_start_index = 0;
     c28:	10 92 85 02 	sts	0x0285, r1
     c2c:	10 92 84 02 	sts	0x0284, r1
    
				//why is the index value important? we need it to find the number of heart beats in the last 6 seconds
				if(b_end_index >= b_start_index)  
     c30:	20 91 86 02 	lds	r18, 0x0286
     c34:	30 91 87 02 	lds	r19, 0x0287
     c38:	80 91 84 02 	lds	r24, 0x0284
     c3c:	90 91 85 02 	lds	r25, 0x0285
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	8c f0       	brlt	.+34     	; 0xc68 <__stack+0x369>
					beats = b_end_index - b_start_index; //if the end is larger than the start, take the difference
     c46:	20 91 86 02 	lds	r18, 0x0286
     c4a:	30 91 87 02 	lds	r19, 0x0287
     c4e:	80 91 84 02 	lds	r24, 0x0284
     c52:	90 91 85 02 	lds	r25, 0x0285
     c56:	a9 01       	movw	r20, r18
     c58:	48 1b       	sub	r20, r24
     c5a:	59 0b       	sbc	r21, r25
     c5c:	ca 01       	movw	r24, r20
     c5e:	90 93 97 02 	sts	0x0297, r25
     c62:	80 93 96 02 	sts	0x0296, r24
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <__stack+0x38f>
				else
					beats = (b_end_index+ NSAMPLES) - b_start_index;// if the start is larger, the end rolled over, and is effectively at the (NSAMPLE + end) index
     c68:	80 91 86 02 	lds	r24, 0x0286
     c6c:	90 91 87 02 	lds	r25, 0x0287
     c70:	9c 01       	movw	r18, r24
     c72:	22 5e       	subi	r18, 0xE2	; 226
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	80 91 84 02 	lds	r24, 0x0284
     c7a:	90 91 85 02 	lds	r25, 0x0285
     c7e:	f9 01       	movw	r30, r18
     c80:	e8 1b       	sub	r30, r24
     c82:	f9 0b       	sbc	r31, r25
     c84:	cf 01       	movw	r24, r30
     c86:	90 93 97 02 	sts	0x0297, r25
     c8a:	80 93 96 02 	sts	0x0296, r24
// 					UDR0='h';
//				Since beats is only a value of less than 10, it needs to be multiplied by a factor in order to determine the BPM
				//this is the only way i know how to post to an mbox so its a little wonky
				//but i define the constants up at the top and post the ones that match to the mbox
				
				if(beats == 1)
     c8e:	80 91 96 02 	lds	r24, 0x0296
     c92:	90 91 97 02 	lds	r25, 0x0297
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	91 05       	cpc	r25, r1
     c9a:	61 f4       	brne	.+24     	; 0xcb4 <__stack+0x3b5>
				{
					OSMboxPost(HeartMBox,(void *) b1);
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9c 01       	movw	r18, r24
     ca4:	80 91 cf 03 	lds	r24, 0x03CF
     ca8:	90 91 d0 03 	lds	r25, 0x03D0
     cac:	b9 01       	movw	r22, r18
     cae:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     cb2:	97 c0       	rjmp	.+302    	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 2)
     cb4:	80 91 96 02 	lds	r24, 0x0296
     cb8:	90 91 97 02 	lds	r25, 0x0297
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	91 05       	cpc	r25, r1
     cc0:	61 f4       	brne	.+24     	; 0xcda <__stack+0x3db>
				{
					OSMboxPost(HeartMBox,(void *) b2);
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9c 01       	movw	r18, r24
     cca:	80 91 cf 03 	lds	r24, 0x03CF
     cce:	90 91 d0 03 	lds	r25, 0x03D0
     cd2:	b9 01       	movw	r22, r18
     cd4:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     cd8:	84 c0       	rjmp	.+264    	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 3)
     cda:	80 91 96 02 	lds	r24, 0x0296
     cde:	90 91 97 02 	lds	r25, 0x0297
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	91 05       	cpc	r25, r1
     ce6:	61 f4       	brne	.+24     	; 0xd00 <__stack+0x401>
				{
					OSMboxPost(HeartMBox,(void *) b3);
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9c 01       	movw	r18, r24
     cf0:	80 91 cf 03 	lds	r24, 0x03CF
     cf4:	90 91 d0 03 	lds	r25, 0x03D0
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     cfe:	71 c0       	rjmp	.+226    	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 4)
     d00:	80 91 96 02 	lds	r24, 0x0296
     d04:	90 91 97 02 	lds	r25, 0x0297
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	91 05       	cpc	r25, r1
     d0c:	61 f4       	brne	.+24     	; 0xd26 <__stack+0x427>
				{
					OSMboxPost(HeartMBox,(void *) b4);
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 01       	movw	r18, r24
     d16:	80 91 cf 03 	lds	r24, 0x03CF
     d1a:	90 91 d0 03 	lds	r25, 0x03D0
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     d24:	5e c0       	rjmp	.+188    	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 5)
     d26:	80 91 96 02 	lds	r24, 0x0296
     d2a:	90 91 97 02 	lds	r25, 0x0297
     d2e:	85 30       	cpi	r24, 0x05	; 5
     d30:	91 05       	cpc	r25, r1
     d32:	61 f4       	brne	.+24     	; 0xd4c <__stack+0x44d>
				{
					OSMboxPost(HeartMBox,(void *) b5);
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9c 01       	movw	r18, r24
     d3c:	80 91 cf 03 	lds	r24, 0x03CF
     d40:	90 91 d0 03 	lds	r25, 0x03D0
     d44:	b9 01       	movw	r22, r18
     d46:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     d4a:	4b c0       	rjmp	.+150    	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 6)
     d4c:	80 91 96 02 	lds	r24, 0x0296
     d50:	90 91 97 02 	lds	r25, 0x0297
     d54:	86 30       	cpi	r24, 0x06	; 6
     d56:	91 05       	cpc	r25, r1
     d58:	61 f4       	brne	.+24     	; 0xd72 <__stack+0x473>
				{
					OSMboxPost(HeartMBox,(void *) b6);
     d5a:	8e 81       	ldd	r24, Y+6	; 0x06
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9c 01       	movw	r18, r24
     d62:	80 91 cf 03 	lds	r24, 0x03CF
     d66:	90 91 d0 03 	lds	r25, 0x03D0
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     d70:	38 c0       	rjmp	.+112    	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 7)
     d72:	80 91 96 02 	lds	r24, 0x0296
     d76:	90 91 97 02 	lds	r25, 0x0297
     d7a:	87 30       	cpi	r24, 0x07	; 7
     d7c:	91 05       	cpc	r25, r1
     d7e:	61 f4       	brne	.+24     	; 0xd98 <__stack+0x499>
				{
					OSMboxPost(HeartMBox,(void *) b7);
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 01       	movw	r18, r24
     d88:	80 91 cf 03 	lds	r24, 0x03CF
     d8c:	90 91 d0 03 	lds	r25, 0x03D0
     d90:	b9 01       	movw	r22, r18
     d92:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     d96:	25 c0       	rjmp	.+74     	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 8)
     d98:	80 91 96 02 	lds	r24, 0x0296
     d9c:	90 91 97 02 	lds	r25, 0x0297
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	91 05       	cpc	r25, r1
     da4:	61 f4       	brne	.+24     	; 0xdbe <__stack+0x4bf>
				{
					OSMboxPost(HeartMBox,(void *) b8);
     da6:	88 85       	ldd	r24, Y+8	; 0x08
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 01       	movw	r18, r24
     dae:	80 91 cf 03 	lds	r24, 0x03CF
     db2:	90 91 d0 03 	lds	r25, 0x03D0
     db6:	b9 01       	movw	r22, r18
     db8:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     dbc:	12 c0       	rjmp	.+36     	; 0xde2 <__stack+0x4e3>
				}
				else if(beats == 9)
     dbe:	80 91 96 02 	lds	r24, 0x0296
     dc2:	90 91 97 02 	lds	r25, 0x0297
     dc6:	89 30       	cpi	r24, 0x09	; 9
     dc8:	91 05       	cpc	r25, r1
     dca:	59 f4       	brne	.+22     	; 0xde2 <__stack+0x4e3>
				{
					OSMboxPost(HeartMBox,(void *) b9);
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9c 01       	movw	r18, r24
     dd4:	80 91 cf 03 	lds	r24, 0x03CF
     dd8:	90 91 d0 03 	lds	r25, 0x03D0
     ddc:	b9 01       	movw	r22, r18
     dde:	0e 94 88 10 	call	0x2110	; 0x2110 <OSMboxPost>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	bf e3       	ldi	r27, 0x3F	; 63
     dea:	8a 87       	std	Y+10, r24	; 0x0a
     dec:	9b 87       	std	Y+11, r25	; 0x0b
     dee:	ac 87       	std	Y+12, r26	; 0x0c
     df0:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a e7       	ldi	r20, 0x7A	; 122
     df8:	53 e4       	ldi	r21, 0x43	; 67
     dfa:	6a 85       	ldd	r22, Y+10	; 0x0a
     dfc:	7b 85       	ldd	r23, Y+11	; 0x0b
     dfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     e00:	9d 85       	ldd	r25, Y+13	; 0x0d
     e02:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	8e 87       	std	Y+14, r24	; 0x0e
     e0c:	9f 87       	std	Y+15, r25	; 0x0f
     e0e:	a8 8b       	std	Y+16, r26	; 0x10
     e10:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	6e 85       	ldd	r22, Y+14	; 0x0e
     e1c:	7f 85       	ldd	r23, Y+15	; 0x0f
     e1e:	88 89       	ldd	r24, Y+16	; 0x10
     e20:	99 89       	ldd	r25, Y+17	; 0x11
     e22:	0e 94 1c 13 	call	0x2638	; 0x2638 <__cmpsf2>
     e26:	88 23       	and	r24, r24
     e28:	2c f4       	brge	.+10     	; 0xe34 <__stack+0x535>
		__ticks = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9b 8b       	std	Y+19, r25	; 0x13
     e30:	8a 8b       	std	Y+18, r24	; 0x12
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <__stack+0x5b3>
	else if (__tmp > 65535)
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	6e 85       	ldd	r22, Y+14	; 0x0e
     e3e:	7f 85       	ldd	r23, Y+15	; 0x0f
     e40:	88 89       	ldd	r24, Y+16	; 0x10
     e42:	99 89       	ldd	r25, Y+17	; 0x11
     e44:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
     e48:	18 16       	cp	r1, r24
     e4a:	4c f5       	brge	.+82     	; 0xe9e <__stack+0x59f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	6a 85       	ldd	r22, Y+10	; 0x0a
     e56:	7b 85       	ldd	r23, Y+11	; 0x0b
     e58:	8c 85       	ldd	r24, Y+12	; 0x0c
     e5a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e5c:	0e 94 07 14 	call	0x280e	; 0x280e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9b 8b       	std	Y+19, r25	; 0x13
     e72:	8a 8b       	std	Y+18, r24	; 0x12
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <__stack+0x595>
     e76:	89 e1       	ldi	r24, 0x19	; 25
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9d 8b       	std	Y+21, r25	; 0x15
     e7c:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e7e:	8c 89       	ldd	r24, Y+20	; 0x14
     e80:	9d 89       	ldd	r25, Y+21	; 0x15
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <__stack+0x583>
     e86:	9d 8b       	std	Y+21, r25	; 0x15
     e88:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8a 89       	ldd	r24, Y+18	; 0x12
     e8c:	9b 89       	ldd	r25, Y+19	; 0x13
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9b 8b       	std	Y+19, r25	; 0x13
     e92:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8a 89       	ldd	r24, Y+18	; 0x12
     e96:	9b 89       	ldd	r25, Y+19	; 0x13
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <__stack+0x577>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <__stack+0x5c7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	6e 85       	ldd	r22, Y+14	; 0x0e
     ea0:	7f 85       	ldd	r23, Y+15	; 0x0f
     ea2:	88 89       	ldd	r24, Y+16	; 0x10
     ea4:	99 89       	ldd	r25, Y+17	; 0x11
     ea6:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9b 8b       	std	Y+19, r25	; 0x13
     eb0:	8a 8b       	std	Y+18, r24	; 0x12
     eb2:	8a 89       	ldd	r24, Y+18	; 0x12
     eb4:	9b 89       	ldd	r25, Y+19	; 0x13
     eb6:	9f 8b       	std	Y+23, r25	; 0x17
     eb8:	8e 8b       	std	Y+22, r24	; 0x16
     eba:	8e 89       	ldd	r24, Y+22	; 0x16
     ebc:	9f 89       	ldd	r25, Y+23	; 0x17
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <__stack+0x5bf>
     ec2:	9f 8b       	std	Y+23, r25	; 0x17
     ec4:	8e 8b       	std	Y+22, r24	; 0x16
			else
				used = 0;
		}//else if(adcAcc > THRESHOLD )
		//PORTB = 0x00; //turn off light when in delay
		_delay_ms(SAMPLERATE*1000); //delay for the time between samples (convert SMAPLERATE to ms)
		timer += (SAMPLERATE); //a bad, but simple way of telling the time. Our circuit is fast enough that this is relatively accurate
     ec6:	80 91 8c 02 	lds	r24, 0x028C
     eca:	90 91 8d 02 	lds	r25, 0x028D
     ece:	a0 91 8e 02 	lds	r26, 0x028E
     ed2:	b0 91 8f 02 	lds	r27, 0x028F
     ed6:	2f e6       	ldi	r18, 0x6F	; 111
     ed8:	32 e1       	ldi	r19, 0x12	; 18
     eda:	43 e0       	ldi	r20, 0x03	; 3
     edc:	5a e3       	ldi	r21, 0x3A	; 58
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 b8 12 	call	0x2570	; 0x2570 <__addsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	80 93 8c 02 	sts	0x028C, r24
     eee:	90 93 8d 02 	sts	0x028D, r25
     ef2:	a0 93 8e 02 	sts	0x028E, r26
     ef6:	b0 93 8f 02 	sts	0x028F, r27
		OS_EXIT_CRITICAL();
     efa:	78 94       	sei
		//PORTB =0xFF; //led goes on while doing stuff
		//UDR0='P';
		//OSTimeDly(OS_TICKS_PER_SEC/100);
		//OSTimeDly(OS_TICKS_PER_SEC*2);
		//OSTimeDly(OS_TICKS_PER_SEC/2000);
	}//for(;;)
     efc:	64 cd       	rjmp	.-1336   	; 0x9c6 <__stack+0xc7>

00000efe <InitPeripherals>:


void InitPeripherals(void);

void InitPeripherals(void)
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62

	// manage WDT
	cli();	
     f06:	f8 94       	cli
//	WatchDogReset();
//	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
//	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
	WDTCSR=0x00;					// turn wdt off
     f08:	80 e6       	ldi	r24, 0x60	; 96
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fc 01       	movw	r30, r24
     f0e:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     f10:	85 e2       	ldi	r24, 0x25	; 37
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	25 e2       	ldi	r18, 0x25	; 37
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	2f 7d       	andi	r18, 0xDF	; 223
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     f22:	85 e2       	ldi	r24, 0x25	; 37
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	25 e2       	ldi	r18, 0x25	; 37
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	2f 7e       	andi	r18, 0xEF	; 239
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     f34:	84 e2       	ldi	r24, 0x24	; 36
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	24 e2       	ldi	r18, 0x24	; 36
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	f9 01       	movw	r30, r18
     f3e:	20 81       	ld	r18, Z
     f40:	20 62       	ori	r18, 0x20	; 32
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     f46:	84 e2       	ldi	r24, 0x24	; 36
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	24 e2       	ldi	r18, 0x24	; 36
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	20 81       	ld	r18, Z
     f52:	20 61       	ori	r18, 0x10	; 16
     f54:	fc 01       	movw	r30, r24
     f56:	20 83       	st	Z, r18

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     f58:	84 e4       	ldi	r24, 0x44	; 68
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	23 e0       	ldi	r18, 0x03	; 3
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     f62:	85 e4       	ldi	r24, 0x45	; 69
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	2d e0       	ldi	r18, 0x0D	; 13
     f68:	fc 01       	movw	r30, r24
     f6a:	20 83       	st	Z, r18
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     f6c:	87 e4       	ldi	r24, 0x47	; 71
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	26 e2       	ldi	r18, 0x26	; 38
     f72:	fc 01       	movw	r30, r24
     f74:	20 83       	st	Z, r18
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     f76:	8e e6       	ldi	r24, 0x6E	; 110
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	2e e6       	ldi	r18, 0x6E	; 110
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	f9 01       	movw	r30, r18
     f80:	20 81       	ld	r18, Z
     f82:	21 60       	ori	r18, 0x01	; 1
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     f88:	84 e6       	ldi	r24, 0x64	; 100
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	24 e6       	ldi	r18, 0x64	; 100
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	2f 7d       	andi	r18, 0xDF	; 223
     f96:	fc 01       	movw	r30, r24
     f98:	20 83       	st	Z, r18


/* setup USART here  */	
	UBRR0H=(unsigned char) (UBRR>>8);
     f9a:	85 ec       	ldi	r24, 0xC5	; 197
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	fc 01       	movw	r30, r24
     fa0:	10 82       	st	Z, r1
	UBRR0L=(unsigned char) UBRR;
     fa2:	84 ec       	ldi	r24, 0xC4	; 196
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	27 e6       	ldi	r18, 0x67	; 103
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     fac:	81 ec       	ldi	r24, 0xC1	; 193
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	28 e1       	ldi	r18, 0x18	; 24
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18
	
	//1 stop bit 8 data bit
	UCSR0C=(0<<USBS0) | (3<<UCSZ00);
     fb6:	82 ec       	ldi	r24, 0xC2	; 194
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	26 e0       	ldi	r18, 0x06	; 6
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 83       	st	Z, r18
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     fc0:	78 94       	sei
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <OSTaskStkInit>:
 **********************************************************************************************************
 */

//OS_STK *OSTaskStkInit (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt)
void *OSTaskStkInit (void (*task)(void *pd), void *pdata, void *ptos, INT16U opt)
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	2c 97       	sbiw	r28, 0x0c	; 12
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	78 87       	std	Y+8, r23	; 0x08
     fe2:	6f 83       	std	Y+7, r22	; 0x07
     fe4:	5a 87       	std	Y+10, r21	; 0x0a
     fe6:	49 87       	std	Y+9, r20	; 0x09
     fe8:	3c 87       	std	Y+12, r19	; 0x0c
     fea:	2b 87       	std	Y+11, r18	; 0x0b
    INT8U  *stk;
    INT16U  tmp;

    opt     = opt;                          /* 'opt' is not used, prevent warning                       */
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
    tmp     = (INT16U)task;
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	9c 01       	movw	r18, r24
    1002:	21 50       	subi	r18, 0x01	; 1
    1004:	31 09       	sbc	r19, r1
    1006:	3a 83       	std	Y+2, r19	; 0x02
    1008:	29 83       	std	Y+1, r18	; 0x01
    100a:	2b 81       	ldd	r18, Y+3	; 0x03
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
    *stk-- = (INT8U)(tmp >> 8);
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	9c 01       	movw	r18, r24
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	31 09       	sbc	r19, r1
    101a:	3a 83       	std	Y+2, r19	; 0x02
    101c:	29 83       	std	Y+1, r18	; 0x01
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	3c 81       	ldd	r19, Y+4	; 0x04
    1022:	23 2f       	mov	r18, r19
    1024:	33 27       	eor	r19, r19
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	9c 01       	movw	r18, r24
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	31 09       	sbc	r19, r1
    1034:	3a 83       	std	Y+2, r19	; 0x02
    1036:	29 83       	std	Y+1, r18	; 0x01
    1038:	fc 01       	movw	r30, r24
    103a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	9c 01       	movw	r18, r24
    1042:	21 50       	subi	r18, 0x01	; 1
    1044:	31 09       	sbc	r19, r1
    1046:	3a 83       	std	Y+2, r19	; 0x02
    1048:	29 83       	std	Y+1, r18	; 0x01
    104a:	fc 01       	movw	r30, r24
    104c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	9c 01       	movw	r18, r24
    1054:	21 50       	subi	r18, 0x01	; 1
    1056:	31 09       	sbc	r19, r1
    1058:	3a 83       	std	Y+2, r19	; 0x02
    105a:	29 83       	std	Y+1, r18	; 0x01
    105c:	fc 01       	movw	r30, r24
    105e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	9c 01       	movw	r18, r24
    1066:	21 50       	subi	r18, 0x01	; 1
    1068:	31 09       	sbc	r19, r1
    106a:	3a 83       	std	Y+2, r19	; 0x02
    106c:	29 83       	std	Y+1, r18	; 0x01
    106e:	fc 01       	movw	r30, r24
    1070:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	9c 01       	movw	r18, r24
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	31 09       	sbc	r19, r1
    107c:	3a 83       	std	Y+2, r19	; 0x02
    107e:	29 83       	std	Y+1, r18	; 0x01
    1080:	fc 01       	movw	r30, r24
    1082:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	9c 01       	movw	r18, r24
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	31 09       	sbc	r19, r1
    108e:	3a 83       	std	Y+2, r19	; 0x02
    1090:	29 83       	std	Y+1, r18	; 0x01
    1092:	fc 01       	movw	r30, r24
    1094:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	9c 01       	movw	r18, r24
    109c:	21 50       	subi	r18, 0x01	; 1
    109e:	31 09       	sbc	r19, r1
    10a0:	3a 83       	std	Y+2, r19	; 0x02
    10a2:	29 83       	std	Y+1, r18	; 0x01
    10a4:	fc 01       	movw	r30, r24
    10a6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	9c 01       	movw	r18, r24
    10ae:	21 50       	subi	r18, 0x01	; 1
    10b0:	31 09       	sbc	r19, r1
    10b2:	3a 83       	std	Y+2, r19	; 0x02
    10b4:	29 83       	std	Y+1, r18	; 0x01
    10b6:	fc 01       	movw	r30, r24
    10b8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	9c 01       	movw	r18, r24
    10c0:	21 50       	subi	r18, 0x01	; 1
    10c2:	31 09       	sbc	r19, r1
    10c4:	3a 83       	std	Y+2, r19	; 0x02
    10c6:	29 83       	std	Y+1, r18	; 0x01
    10c8:	fc 01       	movw	r30, r24
    10ca:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	9c 01       	movw	r18, r24
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	31 09       	sbc	r19, r1
    10d6:	3a 83       	std	Y+2, r19	; 0x02
    10d8:	29 83       	std	Y+1, r18	; 0x01
    10da:	fc 01       	movw	r30, r24
    10dc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	9c 01       	movw	r18, r24
    10e4:	21 50       	subi	r18, 0x01	; 1
    10e6:	31 09       	sbc	r19, r1
    10e8:	3a 83       	std	Y+2, r19	; 0x02
    10ea:	29 83       	std	Y+1, r18	; 0x01
    10ec:	fc 01       	movw	r30, r24
    10ee:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	9c 01       	movw	r18, r24
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	31 09       	sbc	r19, r1
    10fa:	3a 83       	std	Y+2, r19	; 0x02
    10fc:	29 83       	std	Y+1, r18	; 0x01
    10fe:	fc 01       	movw	r30, r24
    1100:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	9c 01       	movw	r18, r24
    1108:	21 50       	subi	r18, 0x01	; 1
    110a:	31 09       	sbc	r19, r1
    110c:	3a 83       	std	Y+2, r19	; 0x02
    110e:	29 83       	std	Y+1, r18	; 0x01
    1110:	fc 01       	movw	r30, r24
    1112:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	9c 01       	movw	r18, r24
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	31 09       	sbc	r19, r1
    111e:	3a 83       	std	Y+2, r19	; 0x02
    1120:	29 83       	std	Y+1, r18	; 0x01
    1122:	fc 01       	movw	r30, r24
    1124:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	9c 01       	movw	r18, r24
    112c:	21 50       	subi	r18, 0x01	; 1
    112e:	31 09       	sbc	r19, r1
    1130:	3a 83       	std	Y+2, r19	; 0x02
    1132:	29 83       	std	Y+1, r18	; 0x01
    1134:	fc 01       	movw	r30, r24
    1136:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	9c 01       	movw	r18, r24
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	31 09       	sbc	r19, r1
    1142:	3a 83       	std	Y+2, r19	; 0x02
    1144:	29 83       	std	Y+1, r18	; 0x01
    1146:	fc 01       	movw	r30, r24
    1148:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	9c 01       	movw	r18, r24
    1150:	21 50       	subi	r18, 0x01	; 1
    1152:	31 09       	sbc	r19, r1
    1154:	3a 83       	std	Y+2, r19	; 0x02
    1156:	29 83       	std	Y+1, r18	; 0x01
    1158:	fc 01       	movw	r30, r24
    115a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	9c 01       	movw	r18, r24
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	31 09       	sbc	r19, r1
    1166:	3a 83       	std	Y+2, r19	; 0x02
    1168:	29 83       	std	Y+1, r18	; 0x01
    116a:	fc 01       	movw	r30, r24
    116c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	9c 01       	movw	r18, r24
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	31 09       	sbc	r19, r1
    1178:	3a 83       	std	Y+2, r19	; 0x02
    117a:	29 83       	std	Y+1, r18	; 0x01
    117c:	fc 01       	movw	r30, r24
    117e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	9c 01       	movw	r18, r24
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	31 09       	sbc	r19, r1
    118a:	3a 83       	std	Y+2, r19	; 0x02
    118c:	29 83       	std	Y+1, r18	; 0x01
    118e:	fc 01       	movw	r30, r24
    1190:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	9c 01       	movw	r18, r24
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	31 09       	sbc	r19, r1
    119c:	3a 83       	std	Y+2, r19	; 0x02
    119e:	29 83       	std	Y+1, r18	; 0x01
    11a0:	fc 01       	movw	r30, r24
    11a2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	9c 01       	movw	r18, r24
    11aa:	21 50       	subi	r18, 0x01	; 1
    11ac:	31 09       	sbc	r19, r1
    11ae:	3a 83       	std	Y+2, r19	; 0x02
    11b0:	29 83       	std	Y+1, r18	; 0x01
    11b2:	fc 01       	movw	r30, r24
    11b4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	9c 01       	movw	r18, r24
    11bc:	21 50       	subi	r18, 0x01	; 1
    11be:	31 09       	sbc	r19, r1
    11c0:	3a 83       	std	Y+2, r19	; 0x02
    11c2:	29 83       	std	Y+1, r18	; 0x01
    11c4:	fc 01       	movw	r30, r24
    11c6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	9c 01       	movw	r18, r24
    11ce:	21 50       	subi	r18, 0x01	; 1
    11d0:	31 09       	sbc	r19, r1
    11d2:	3a 83       	std	Y+2, r19	; 0x02
    11d4:	29 83       	std	Y+1, r18	; 0x01
    11d6:	fc 01       	movw	r30, r24
    11d8:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    11da:	8f 81       	ldd	r24, Y+7	; 0x07
    11dc:	98 85       	ldd	r25, Y+8	; 0x08
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	9c 01       	movw	r18, r24
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	31 09       	sbc	r19, r1
    11ec:	3a 83       	std	Y+2, r19	; 0x02
    11ee:	29 83       	std	Y+1, r18	; 0x01
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	9c 01       	movw	r18, r24
    11fc:	21 50       	subi	r18, 0x01	; 1
    11fe:	31 09       	sbc	r19, r1
    1200:	3a 83       	std	Y+2, r19	; 0x02
    1202:	29 83       	std	Y+1, r18	; 0x01
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	23 2f       	mov	r18, r19
    120a:	33 27       	eor	r19, r19
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	9c 01       	movw	r18, r24
    1216:	21 50       	subi	r18, 0x01	; 1
    1218:	31 09       	sbc	r19, r1
    121a:	3a 83       	std	Y+2, r19	; 0x02
    121c:	29 83       	std	Y+1, r18	; 0x01
    121e:	fc 01       	movw	r30, r24
    1220:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	9c 01       	movw	r18, r24
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	31 09       	sbc	r19, r1
    122c:	3a 83       	std	Y+2, r19	; 0x02
    122e:	29 83       	std	Y+1, r18	; 0x01
    1230:	fc 01       	movw	r30, r24
    1232:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	9c 01       	movw	r18, r24
    123a:	21 50       	subi	r18, 0x01	; 1
    123c:	31 09       	sbc	r19, r1
    123e:	3a 83       	std	Y+2, r19	; 0x02
    1240:	29 83       	std	Y+1, r18	; 0x01
    1242:	fc 01       	movw	r30, r24
    1244:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	9c 01       	movw	r18, r24
    124c:	21 50       	subi	r18, 0x01	; 1
    124e:	31 09       	sbc	r19, r1
    1250:	3a 83       	std	Y+2, r19	; 0x02
    1252:	29 83       	std	Y+1, r18	; 0x01
    1254:	fc 01       	movw	r30, r24
    1256:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	9c 01       	movw	r18, r24
    125e:	21 50       	subi	r18, 0x01	; 1
    1260:	31 09       	sbc	r19, r1
    1262:	3a 83       	std	Y+2, r19	; 0x02
    1264:	29 83       	std	Y+1, r18	; 0x01
    1266:	fc 01       	movw	r30, r24
    1268:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	9c 01       	movw	r18, r24
    1270:	21 50       	subi	r18, 0x01	; 1
    1272:	31 09       	sbc	r19, r1
    1274:	3a 83       	std	Y+2, r19	; 0x02
    1276:	29 83       	std	Y+1, r18	; 0x01
    1278:	fc 01       	movw	r30, r24
    127a:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	9c 01       	movw	r18, r24
    1282:	21 50       	subi	r18, 0x01	; 1
    1284:	31 09       	sbc	r19, r1
    1286:	3a 83       	std	Y+2, r19	; 0x02
    1288:	29 83       	std	Y+1, r18	; 0x01
    128a:	20 e8       	ldi	r18, 0x80	; 128
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
    return ((OS_STK *)stk);
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1294:	2c 96       	adiw	r28, 0x0c	; 12
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <OSTaskCreateHook+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <OSEventTaskRdy>:
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	2c 97       	sbiw	r28, 0x0c	; 12
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	99 87       	std	Y+9, r25	; 0x09
    12f0:	88 87       	std	Y+8, r24	; 0x08
    12f2:	7b 87       	std	Y+11, r23	; 0x0b
    12f4:	6a 87       	std	Y+10, r22	; 0x0a
    12f6:	4c 87       	std	Y+12, r20	; 0x0c
    12f8:	88 85       	ldd	r24, Y+8	; 0x08
    12fa:	99 85       	ldd	r25, Y+9	; 0x09
    12fc:	fc 01       	movw	r30, r24
    12fe:	85 85       	ldd	r24, Z+13	; 0x0d
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	88 5b       	subi	r24, 0xB8	; 184
    1306:	9e 4f       	sbci	r25, 0xFE	; 254
    1308:	fc 01       	movw	r30, r24
    130a:	80 81       	ld	r24, Z
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	80 5c       	subi	r24, 0xC0	; 192
    1316:	9e 4f       	sbci	r25, 0xFE	; 254
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	8a 83       	std	Y+2, r24	; 0x02
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	28 85       	ldd	r18, Y+8	; 0x08
    1326:	39 85       	ldd	r19, Y+9	; 0x09
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	02 96       	adiw	r24, 0x02	; 2
    132e:	fc 01       	movw	r30, r24
    1330:	80 81       	ld	r24, Z
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	88 5b       	subi	r24, 0xB8	; 184
    1338:	9e 4f       	sbci	r25, 0xFE	; 254
    133a:	fc 01       	movw	r30, r24
    133c:	80 81       	ld	r24, Z
    133e:	8b 83       	std	Y+3, r24	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	80 5c       	subi	r24, 0xC0	; 192
    1348:	9e 4f       	sbci	r25, 0xFE	; 254
    134a:	fc 01       	movw	r30, r24
    134c:	80 81       	ld	r24, Z
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	98 2f       	mov	r25, r24
    1354:	99 0f       	add	r25, r25
    1356:	99 0f       	add	r25, r25
    1358:	99 0f       	add	r25, r25
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	89 0f       	add	r24, r25
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	29 81       	ldd	r18, Y+1	; 0x01
    1368:	22 2f       	mov	r18, r18
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	48 85       	ldd	r20, Y+8	; 0x08
    136e:	59 85       	ldd	r21, Y+9	; 0x09
    1370:	24 0f       	add	r18, r20
    1372:	35 1f       	adc	r19, r21
    1374:	2e 5f       	subi	r18, 0xFE	; 254
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	32 2f       	mov	r19, r18
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	20 95       	com	r18
    1382:	23 23       	and	r18, r19
    1384:	42 2f       	mov	r20, r18
    1386:	28 85       	ldd	r18, Y+8	; 0x08
    1388:	39 85       	ldd	r19, Y+9	; 0x09
    138a:	28 0f       	add	r18, r24
    138c:	39 1f       	adc	r19, r25
    138e:	2e 5f       	subi	r18, 0xFE	; 254
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	f9 01       	movw	r30, r18
    1394:	40 83       	st	Z, r20
    1396:	28 85       	ldd	r18, Y+8	; 0x08
    1398:	39 85       	ldd	r19, Y+9	; 0x09
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	02 96       	adiw	r24, 0x02	; 2
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	88 23       	and	r24, r24
    13a6:	69 f4       	brne	.+26     	; 0x13c2 <OSEventTaskRdy+0xe8>
    13a8:	88 85       	ldd	r24, Y+8	; 0x08
    13aa:	99 85       	ldd	r25, Y+9	; 0x09
    13ac:	fc 01       	movw	r30, r24
    13ae:	85 85       	ldd	r24, Z+13	; 0x0d
    13b0:	98 2f       	mov	r25, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 95       	com	r24
    13b6:	89 23       	and	r24, r25
    13b8:	28 2f       	mov	r18, r24
    13ba:	88 85       	ldd	r24, Y+8	; 0x08
    13bc:	99 85       	ldd	r25, Y+9	; 0x09
    13be:	fc 01       	movw	r30, r24
    13c0:	25 87       	std	Z+13, r18	; 0x0d
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	88 5f       	subi	r24, 0xF8	; 248
    13ce:	99 4f       	sbci	r25, 0xF9	; 249
    13d0:	fc 01       	movw	r30, r24
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	9f 83       	std	Y+7, r25	; 0x07
    13d8:	8e 83       	std	Y+6, r24	; 0x06
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	fc 01       	movw	r30, r24
    13e0:	13 86       	std	Z+11, r1	; 0x0b
    13e2:	12 86       	std	Z+10, r1	; 0x0a
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	fc 01       	movw	r30, r24
    13ea:	17 82       	std	Z+7, r1	; 0x07
    13ec:	16 82       	std	Z+6, r1	; 0x06
    13ee:	8e 81       	ldd	r24, Y+6	; 0x06
    13f0:	9f 81       	ldd	r25, Y+7	; 0x07
    13f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    13f4:	3b 85       	ldd	r19, Y+11	; 0x0b
    13f6:	fc 01       	movw	r30, r24
    13f8:	31 87       	std	Z+9, r19	; 0x09
    13fa:	20 87       	std	Z+8, r18	; 0x08
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	fc 01       	movw	r30, r24
    1402:	84 85       	ldd	r24, Z+12	; 0x0c
    1404:	98 2f       	mov	r25, r24
    1406:	8c 85       	ldd	r24, Y+12	; 0x0c
    1408:	80 95       	com	r24
    140a:	89 23       	and	r24, r25
    140c:	28 2f       	mov	r18, r24
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	fc 01       	movw	r30, r24
    1414:	24 87       	std	Z+12, r18	; 0x0c
    1416:	8e 81       	ldd	r24, Y+6	; 0x06
    1418:	9f 81       	ldd	r25, Y+7	; 0x07
    141a:	fc 01       	movw	r30, r24
    141c:	84 85       	ldd	r24, Z+12	; 0x0c
    141e:	88 23       	and	r24, r24
    1420:	b1 f4       	brne	.+44     	; 0x144e <OSEventTaskRdy+0x174>
    1422:	90 91 af 05 	lds	r25, 0x05AF
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	89 2b       	or	r24, r25
    142a:	80 93 af 05 	sts	0x05AF, r24
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	29 81       	ldd	r18, Y+1	; 0x01
    1436:	22 2f       	mov	r18, r18
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	20 55       	subi	r18, 0x50	; 80
    143c:	3a 4f       	sbci	r19, 0xFA	; 250
    143e:	f9 01       	movw	r30, r18
    1440:	30 81       	ld	r19, Z
    1442:	2c 81       	ldd	r18, Y+4	; 0x04
    1444:	23 2b       	or	r18, r19
    1446:	80 55       	subi	r24, 0x50	; 80
    1448:	9a 4f       	sbci	r25, 0xFA	; 250
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
    144e:	2c 96       	adiw	r28, 0x0c	; 12
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <OSEventTaskWait>:
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	00 d0       	rcall	.+0      	; 0x1466 <OSEventTaskWait+0x6>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	80 91 bb 05 	lds	r24, 0x05BB
    1472:	90 91 bc 05 	lds	r25, 0x05BC
    1476:	29 81       	ldd	r18, Y+1	; 0x01
    1478:	3a 81       	ldd	r19, Y+2	; 0x02
    147a:	fc 01       	movw	r30, r24
    147c:	37 83       	std	Z+7, r19	; 0x07
    147e:	26 83       	std	Z+6, r18	; 0x06
    1480:	80 91 bb 05 	lds	r24, 0x05BB
    1484:	90 91 bc 05 	lds	r25, 0x05BC
    1488:	fc 01       	movw	r30, r24
    148a:	87 85       	ldd	r24, Z+15	; 0x0f
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	20 91 bb 05 	lds	r18, 0x05BB
    1494:	30 91 bc 05 	lds	r19, 0x05BC
    1498:	f9 01       	movw	r30, r18
    149a:	27 85       	ldd	r18, Z+15	; 0x0f
    149c:	22 2f       	mov	r18, r18
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	20 55       	subi	r18, 0x50	; 80
    14a2:	3a 4f       	sbci	r19, 0xFA	; 250
    14a4:	f9 01       	movw	r30, r18
    14a6:	20 81       	ld	r18, Z
    14a8:	42 2f       	mov	r20, r18
    14aa:	20 91 bb 05 	lds	r18, 0x05BB
    14ae:	30 91 bc 05 	lds	r19, 0x05BC
    14b2:	f9 01       	movw	r30, r18
    14b4:	20 89       	ldd	r18, Z+16	; 0x10
    14b6:	20 95       	com	r18
    14b8:	24 23       	and	r18, r20
    14ba:	42 2f       	mov	r20, r18
    14bc:	9c 01       	movw	r18, r24
    14be:	20 55       	subi	r18, 0x50	; 80
    14c0:	3a 4f       	sbci	r19, 0xFA	; 250
    14c2:	f9 01       	movw	r30, r18
    14c4:	40 83       	st	Z, r20
    14c6:	80 55       	subi	r24, 0x50	; 80
    14c8:	9a 4f       	sbci	r25, 0xFA	; 250
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	88 23       	and	r24, r24
    14d0:	69 f4       	brne	.+26     	; 0x14ec <OSEventTaskWait+0x8c>
    14d2:	80 91 bb 05 	lds	r24, 0x05BB
    14d6:	90 91 bc 05 	lds	r25, 0x05BC
    14da:	fc 01       	movw	r30, r24
    14dc:	81 89       	ldd	r24, Z+17	; 0x11
    14de:	98 2f       	mov	r25, r24
    14e0:	90 95       	com	r25
    14e2:	80 91 af 05 	lds	r24, 0x05AF
    14e6:	89 23       	and	r24, r25
    14e8:	80 93 af 05 	sts	0x05AF, r24
    14ec:	80 91 bb 05 	lds	r24, 0x05BB
    14f0:	90 91 bc 05 	lds	r25, 0x05BC
    14f4:	fc 01       	movw	r30, r24
    14f6:	87 85       	ldd	r24, Z+15	; 0x0f
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	20 91 bb 05 	lds	r18, 0x05BB
    1500:	30 91 bc 05 	lds	r19, 0x05BC
    1504:	f9 01       	movw	r30, r18
    1506:	27 85       	ldd	r18, Z+15	; 0x0f
    1508:	22 2f       	mov	r18, r18
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	49 81       	ldd	r20, Y+1	; 0x01
    150e:	5a 81       	ldd	r21, Y+2	; 0x02
    1510:	24 0f       	add	r18, r20
    1512:	35 1f       	adc	r19, r21
    1514:	2e 5f       	subi	r18, 0xFE	; 254
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	f9 01       	movw	r30, r18
    151a:	40 81       	ld	r20, Z
    151c:	20 91 bb 05 	lds	r18, 0x05BB
    1520:	30 91 bc 05 	lds	r19, 0x05BC
    1524:	f9 01       	movw	r30, r18
    1526:	20 89       	ldd	r18, Z+16	; 0x10
    1528:	42 2b       	or	r20, r18
    152a:	29 81       	ldd	r18, Y+1	; 0x01
    152c:	3a 81       	ldd	r19, Y+2	; 0x02
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	02 96       	adiw	r24, 0x02	; 2
    1534:	fc 01       	movw	r30, r24
    1536:	40 83       	st	Z, r20
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	fc 01       	movw	r30, r24
    153e:	25 85       	ldd	r18, Z+13	; 0x0d
    1540:	80 91 bb 05 	lds	r24, 0x05BB
    1544:	90 91 bc 05 	lds	r25, 0x05BC
    1548:	fc 01       	movw	r30, r24
    154a:	81 89       	ldd	r24, Z+17	; 0x11
    154c:	28 2b       	or	r18, r24
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	fc 01       	movw	r30, r24
    1554:	25 87       	std	Z+13, r18	; 0x0d
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <OSEventTO>:
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	00 d0       	rcall	.+0      	; 0x1566 <OSEventTO+0x6>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	80 91 bb 05 	lds	r24, 0x05BB
    1572:	90 91 bc 05 	lds	r25, 0x05BC
    1576:	fc 01       	movw	r30, r24
    1578:	87 85       	ldd	r24, Z+15	; 0x0f
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	20 91 bb 05 	lds	r18, 0x05BB
    1582:	30 91 bc 05 	lds	r19, 0x05BC
    1586:	f9 01       	movw	r30, r18
    1588:	27 85       	ldd	r18, Z+15	; 0x0f
    158a:	22 2f       	mov	r18, r18
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	49 81       	ldd	r20, Y+1	; 0x01
    1590:	5a 81       	ldd	r21, Y+2	; 0x02
    1592:	24 0f       	add	r18, r20
    1594:	35 1f       	adc	r19, r21
    1596:	2e 5f       	subi	r18, 0xFE	; 254
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	42 2f       	mov	r20, r18
    15a0:	20 91 bb 05 	lds	r18, 0x05BB
    15a4:	30 91 bc 05 	lds	r19, 0x05BC
    15a8:	f9 01       	movw	r30, r18
    15aa:	20 89       	ldd	r18, Z+16	; 0x10
    15ac:	20 95       	com	r18
    15ae:	24 23       	and	r18, r20
    15b0:	42 2f       	mov	r20, r18
    15b2:	29 81       	ldd	r18, Y+1	; 0x01
    15b4:	3a 81       	ldd	r19, Y+2	; 0x02
    15b6:	28 0f       	add	r18, r24
    15b8:	39 1f       	adc	r19, r25
    15ba:	2e 5f       	subi	r18, 0xFE	; 254
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	f9 01       	movw	r30, r18
    15c0:	40 83       	st	Z, r20
    15c2:	29 81       	ldd	r18, Y+1	; 0x01
    15c4:	3a 81       	ldd	r19, Y+2	; 0x02
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	02 96       	adiw	r24, 0x02	; 2
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	88 23       	and	r24, r24
    15d2:	91 f4       	brne	.+36     	; 0x15f8 <OSEventTO+0x98>
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	fc 01       	movw	r30, r24
    15da:	85 85       	ldd	r24, Z+13	; 0x0d
    15dc:	28 2f       	mov	r18, r24
    15de:	80 91 bb 05 	lds	r24, 0x05BB
    15e2:	90 91 bc 05 	lds	r25, 0x05BC
    15e6:	fc 01       	movw	r30, r24
    15e8:	81 89       	ldd	r24, Z+17	; 0x11
    15ea:	80 95       	com	r24
    15ec:	82 23       	and	r24, r18
    15ee:	28 2f       	mov	r18, r24
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	fc 01       	movw	r30, r24
    15f6:	25 87       	std	Z+13, r18	; 0x0d
    15f8:	80 91 bb 05 	lds	r24, 0x05BB
    15fc:	90 91 bc 05 	lds	r25, 0x05BC
    1600:	fc 01       	movw	r30, r24
    1602:	14 86       	std	Z+12, r1	; 0x0c
    1604:	80 91 bb 05 	lds	r24, 0x05BB
    1608:	90 91 bc 05 	lds	r25, 0x05BC
    160c:	fc 01       	movw	r30, r24
    160e:	17 82       	std	Z+7, r1	; 0x07
    1610:	16 82       	std	Z+6, r1	; 0x06
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <OSEventWaitListInit>:
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	00 d0       	rcall	.+0      	; 0x1622 <OSEventWaitListInit+0x6>
    1622:	1f 92       	push	r1
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	9b 83       	std	Y+3, r25	; 0x03
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	9b 81       	ldd	r25, Y+3	; 0x03
    1630:	fc 01       	movw	r30, r24
    1632:	15 86       	std	Z+13, r1	; 0x0d
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	0d c0       	rjmp	.+26     	; 0x1652 <OSEventWaitListInit+0x36>
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	2a 81       	ldd	r18, Y+2	; 0x02
    1640:	3b 81       	ldd	r19, Y+3	; 0x03
    1642:	82 0f       	add	r24, r18
    1644:	93 1f       	adc	r25, r19
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	fc 01       	movw	r30, r24
    164a:	10 82       	st	Z, r1
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	88 30       	cpi	r24, 0x08	; 8
    1656:	80 f3       	brcs	.-32     	; 0x1638 <OSEventWaitListInit+0x1c>
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <OSInit>:
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	00 d0       	rcall	.+0      	; 0x166a <OSInit+0x6>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	10 92 bd 05 	sts	0x05BD, r1
    1672:	10 92 be 05 	sts	0x05BE, r1
    1676:	10 92 bf 05 	sts	0x05BF, r1
    167a:	10 92 c0 05 	sts	0x05C0, r1
    167e:	10 92 ba 05 	sts	0x05BA, r1
    1682:	10 92 97 05 	sts	0x0597, r1
    1686:	10 92 ac 05 	sts	0x05AC, r1
    168a:	10 92 98 05 	sts	0x0598, r1
    168e:	10 92 99 05 	sts	0x0599, r1
    1692:	10 92 9a 05 	sts	0x059A, r1
    1696:	10 92 9b 05 	sts	0x059B, r1
    169a:	10 92 9c 05 	sts	0x059C, r1
    169e:	10 92 a1 05 	sts	0x05A1, r1
    16a2:	10 92 a2 05 	sts	0x05A2, r1
    16a6:	10 92 a3 05 	sts	0x05A3, r1
    16aa:	10 92 a4 05 	sts	0x05A4, r1
    16ae:	10 92 af 05 	sts	0x05AF, r1
    16b2:	1a 82       	std	Y+2, r1	; 0x02
    16b4:	19 82       	std	Y+1, r1	; 0x01
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <OSInit+0x6a>
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	80 55       	subi	r24, 0x50	; 80
    16be:	9a 4f       	sbci	r25, 0xFA	; 250
    16c0:	fc 01       	movw	r30, r24
    16c2:	10 82       	st	Z, r1
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	88 30       	cpi	r24, 0x08	; 8
    16d4:	91 05       	cpc	r25, r1
    16d6:	80 f3       	brcs	.-32     	; 0x16b8 <OSInit+0x54>
    16d8:	10 92 9e 05 	sts	0x059E, r1
    16dc:	10 92 9d 05 	sts	0x059D, r1
    16e0:	10 92 ae 05 	sts	0x05AE, r1
    16e4:	10 92 ad 05 	sts	0x05AD, r1
    16e8:	10 92 bc 05 	sts	0x05BC, r1
    16ec:	10 92 bb 05 	sts	0x05BB, r1
    16f0:	10 92 a0 05 	sts	0x05A0, r1
    16f4:	10 92 9f 05 	sts	0x059F, r1
    16f8:	1a 82       	std	Y+2, r1	; 0x02
    16fa:	19 82       	std	Y+1, r1	; 0x01
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <OSInit+0xb6>
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	88 5f       	subi	r24, 0xF8	; 248
    1708:	99 4f       	sbci	r25, 0xF9	; 249
    170a:	fc 01       	movw	r30, r24
    170c:	11 82       	std	Z+1, r1	; 0x01
    170e:	10 82       	st	Z, r1
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	80 34       	cpi	r24, 0x40	; 64
    1720:	91 05       	cpc	r25, r1
    1722:	68 f3       	brcs	.-38     	; 0x16fe <OSInit+0x9a>
    1724:	1a 82       	std	Y+2, r1	; 0x02
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	28 c0       	rjmp	.+80     	; 0x177a <OSInit+0x116>
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	9c 01       	movw	r18, r24
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	22 0f       	add	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	82 0f       	add	r24, r18
    1744:	93 1f       	adc	r25, r19
    1746:	9c 01       	movw	r18, r24
    1748:	27 5e       	subi	r18, 0xE7	; 231
    174a:	3c 4f       	sbci	r19, 0xFC	; 252
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	ac 01       	movw	r20, r24
    1756:	44 0f       	add	r20, r20
    1758:	55 1f       	adc	r21, r21
    175a:	44 0f       	add	r20, r20
    175c:	55 1f       	adc	r21, r21
    175e:	44 0f       	add	r20, r20
    1760:	55 1f       	adc	r21, r21
    1762:	84 0f       	add	r24, r20
    1764:	95 1f       	adc	r25, r21
    1766:	85 5e       	subi	r24, 0xE5	; 229
    1768:	9c 4f       	sbci	r25, 0xFC	; 252
    176a:	fc 01       	movw	r30, r24
    176c:	31 83       	std	Z+1, r19	; 0x01
    176e:	20 83       	st	Z, r18
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	89 30       	cpi	r24, 0x09	; 9
    1780:	91 05       	cpc	r25, r1
    1782:	98 f2       	brcs	.-90     	; 0x172a <OSInit+0xc6>
    1784:	10 92 be 03 	sts	0x03BE, r1
    1788:	10 92 bd 03 	sts	0x03BD, r1
    178c:	89 e1       	ldi	r24, 0x19	; 25
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	90 93 aa 05 	sts	0x05AA, r25
    1794:	80 93 a9 05 	sts	0x05A9, r24
    1798:	1a 82       	std	Y+2, r1	; 0x02
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	29 c0       	rjmp	.+82     	; 0x17f0 <OSInit+0x18c>
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	9c 01       	movw	r18, r24
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	22 0f       	add	r18, r18
    17b4:	33 1f       	adc	r19, r19
    17b6:	28 1b       	sub	r18, r24
    17b8:	39 0b       	sbc	r19, r25
    17ba:	a9 01       	movw	r20, r18
    17bc:	4f 53       	subi	r20, 0x3F	; 63
    17be:	5a 4f       	sbci	r21, 0xFA	; 250
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	9c 01       	movw	r18, r24
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	28 1b       	sub	r18, r24
    17d8:	39 0b       	sbc	r19, r25
    17da:	c9 01       	movw	r24, r18
    17dc:	8f 53       	subi	r24, 0x3F	; 63
    17de:	9a 4f       	sbci	r25, 0xFA	; 250
    17e0:	fc 01       	movw	r30, r24
    17e2:	51 83       	std	Z+1, r21	; 0x01
    17e4:	40 83       	st	Z, r20
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	91 05       	cpc	r25, r1
    17f8:	90 f2       	brcs	.-92     	; 0x179e <OSInit+0x13a>
    17fa:	10 92 fa 05 	sts	0x05FA, r1
    17fe:	10 92 f9 05 	sts	0x05F9, r1
    1802:	81 ec       	ldi	r24, 0xC1	; 193
    1804:	95 e0       	ldi	r25, 0x05	; 5
    1806:	90 93 b9 05 	sts	0x05B9, r25
    180a:	80 93 b8 05 	sts	0x05B8, r24
    180e:	2f e3       	ldi	r18, 0x3F	; 63
    1810:	48 ed       	ldi	r20, 0xD8	; 216
    1812:	52 e0       	ldi	r21, 0x02	; 2
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	83 e5       	ldi	r24, 0x53	; 83
    181a:	9d e0       	ldi	r25, 0x0D	; 13
    181c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>
    1820:	2e e3       	ldi	r18, 0x3E	; 62
    1822:	48 e1       	ldi	r20, 0x18	; 24
    1824:	53 e0       	ldi	r21, 0x03	; 3
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	80 e7       	ldi	r24, 0x70	; 112
    182c:	9d e0       	ldi	r25, 0x0D	; 13
    182e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <OSTaskCreate>
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <OSIntExit>:
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	f8 94       	cli
    1846:	80 91 ba 05 	lds	r24, 0x05BA
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	80 93 ba 05 	sts	0x05BA, r24
    1850:	90 91 ba 05 	lds	r25, 0x05BA
    1854:	80 91 97 05 	lds	r24, 0x0597
    1858:	89 2b       	or	r24, r25
    185a:	88 23       	and	r24, r24
    185c:	09 f0       	breq	.+2      	; 0x1860 <OSIntExit+0x24>
    185e:	4b c0       	rjmp	.+150    	; 0x18f6 <OSIntExit+0xba>
    1860:	80 91 af 05 	lds	r24, 0x05AF
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	88 5b       	subi	r24, 0xB8	; 184
    186a:	9e 4f       	sbci	r25, 0xFE	; 254
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	80 93 98 02 	sts	0x0298, r24
    1874:	80 91 98 02 	lds	r24, 0x0298
    1878:	28 2f       	mov	r18, r24
    187a:	22 0f       	add	r18, r18
    187c:	22 0f       	add	r18, r18
    187e:	22 0f       	add	r18, r18
    1880:	80 91 98 02 	lds	r24, 0x0298
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	80 55       	subi	r24, 0x50	; 80
    188a:	9a 4f       	sbci	r25, 0xFA	; 250
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	88 5b       	subi	r24, 0xB8	; 184
    1896:	9e 4f       	sbci	r25, 0xFE	; 254
    1898:	fc 01       	movw	r30, r24
    189a:	80 81       	ld	r24, Z
    189c:	82 0f       	add	r24, r18
    189e:	80 93 9d 05 	sts	0x059D, r24
    18a2:	90 91 9d 05 	lds	r25, 0x059D
    18a6:	80 91 9e 05 	lds	r24, 0x059E
    18aa:	98 17       	cp	r25, r24
    18ac:	21 f1       	breq	.+72     	; 0x18f6 <OSIntExit+0xba>
    18ae:	80 91 9d 05 	lds	r24, 0x059D
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	88 5f       	subi	r24, 0xF8	; 248
    18bc:	99 4f       	sbci	r25, 0xF9	; 249
    18be:	fc 01       	movw	r30, r24
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	90 93 ae 05 	sts	0x05AE, r25
    18c8:	80 93 ad 05 	sts	0x05AD, r24
    18cc:	80 91 a1 05 	lds	r24, 0x05A1
    18d0:	90 91 a2 05 	lds	r25, 0x05A2
    18d4:	a0 91 a3 05 	lds	r26, 0x05A3
    18d8:	b0 91 a4 05 	lds	r27, 0x05A4
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	a1 1d       	adc	r26, r1
    18e0:	b1 1d       	adc	r27, r1
    18e2:	80 93 a1 05 	sts	0x05A1, r24
    18e6:	90 93 a2 05 	sts	0x05A2, r25
    18ea:	a0 93 a3 05 	sts	0x05A3, r26
    18ee:	b0 93 a4 05 	sts	0x05A4, r27
    18f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
    18f6:	78 94       	sei
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <OSSched>:
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	1f 92       	push	r1
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	f8 94       	cli
    190a:	90 91 97 05 	lds	r25, 0x0597
    190e:	80 91 ba 05 	lds	r24, 0x05BA
    1912:	89 2b       	or	r24, r25
    1914:	88 23       	and	r24, r24
    1916:	09 f0       	breq	.+2      	; 0x191a <OSSched+0x1c>
    1918:	48 c0       	rjmp	.+144    	; 0x19aa <OSSched+0xac>
    191a:	80 91 af 05 	lds	r24, 0x05AF
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	88 5b       	subi	r24, 0xB8	; 184
    1924:	9e 4f       	sbci	r25, 0xFE	; 254
    1926:	fc 01       	movw	r30, r24
    1928:	80 81       	ld	r24, Z
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	22 0f       	add	r18, r18
    1932:	22 0f       	add	r18, r18
    1934:	22 0f       	add	r18, r18
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	80 55       	subi	r24, 0x50	; 80
    193e:	9a 4f       	sbci	r25, 0xFA	; 250
    1940:	fc 01       	movw	r30, r24
    1942:	80 81       	ld	r24, Z
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	88 5b       	subi	r24, 0xB8	; 184
    194a:	9e 4f       	sbci	r25, 0xFE	; 254
    194c:	fc 01       	movw	r30, r24
    194e:	80 81       	ld	r24, Z
    1950:	82 0f       	add	r24, r18
    1952:	80 93 9d 05 	sts	0x059D, r24
    1956:	90 91 9d 05 	lds	r25, 0x059D
    195a:	80 91 9e 05 	lds	r24, 0x059E
    195e:	98 17       	cp	r25, r24
    1960:	21 f1       	breq	.+72     	; 0x19aa <OSSched+0xac>
    1962:	80 91 9d 05 	lds	r24, 0x059D
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	88 5f       	subi	r24, 0xF8	; 248
    1970:	99 4f       	sbci	r25, 0xF9	; 249
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	90 93 ae 05 	sts	0x05AE, r25
    197c:	80 93 ad 05 	sts	0x05AD, r24
    1980:	80 91 a1 05 	lds	r24, 0x05A1
    1984:	90 91 a2 05 	lds	r25, 0x05A2
    1988:	a0 91 a3 05 	lds	r26, 0x05A3
    198c:	b0 91 a4 05 	lds	r27, 0x05A4
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	a1 1d       	adc	r26, r1
    1994:	b1 1d       	adc	r27, r1
    1996:	80 93 a1 05 	sts	0x05A1, r24
    199a:	90 93 a2 05 	sts	0x05A2, r25
    199e:	a0 93 a3 05 	sts	0x05A3, r26
    19a2:	b0 93 a4 05 	sts	0x05A4, r27
    19a6:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
    19aa:	78 94       	sei
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <OSStart>:
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <OSStart+0x6>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	80 91 98 05 	lds	r24, 0x0598
    19c2:	88 23       	and	r24, r24
    19c4:	d9 f5       	brne	.+118    	; 0x1a3c <OSStart+0x88>
    19c6:	80 91 af 05 	lds	r24, 0x05AF
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	88 5b       	subi	r24, 0xB8	; 184
    19d0:	9e 4f       	sbci	r25, 0xFE	; 254
    19d2:	fc 01       	movw	r30, r24
    19d4:	80 81       	ld	r24, Z
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	80 55       	subi	r24, 0x50	; 80
    19e0:	9a 4f       	sbci	r25, 0xFA	; 250
    19e2:	fc 01       	movw	r30, r24
    19e4:	80 81       	ld	r24, Z
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	88 5b       	subi	r24, 0xB8	; 184
    19ec:	9e 4f       	sbci	r25, 0xFE	; 254
    19ee:	fc 01       	movw	r30, r24
    19f0:	80 81       	ld	r24, Z
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	98 2f       	mov	r25, r24
    19f8:	99 0f       	add	r25, r25
    19fa:	99 0f       	add	r25, r25
    19fc:	99 0f       	add	r25, r25
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	89 0f       	add	r24, r25
    1a02:	80 93 9d 05 	sts	0x059D, r24
    1a06:	80 91 9d 05 	lds	r24, 0x059D
    1a0a:	80 93 9e 05 	sts	0x059E, r24
    1a0e:	80 91 9d 05 	lds	r24, 0x059D
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 5f       	subi	r24, 0xF8	; 248
    1a1c:	99 4f       	sbci	r25, 0xF9	; 249
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	90 93 ae 05 	sts	0x05AE, r25
    1a28:	80 93 ad 05 	sts	0x05AD, r24
    1a2c:	80 91 ad 05 	lds	r24, 0x05AD
    1a30:	90 91 ae 05 	lds	r25, 0x05AE
    1a34:	90 93 bc 05 	sts	0x05BC, r25
    1a38:	80 93 bb 05 	sts	0x05BB, r24
    1a3c:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <OSStatInit>:
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
    1a5a:	f8 94       	cli
    1a5c:	10 92 99 05 	sts	0x0599, r1
    1a60:	10 92 9a 05 	sts	0x059A, r1
    1a64:	10 92 9b 05 	sts	0x059B, r1
    1a68:	10 92 9c 05 	sts	0x059C, r1
    1a6c:	78 94       	sei
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
    1a76:	f8 94       	cli
    1a78:	80 91 99 05 	lds	r24, 0x0599
    1a7c:	90 91 9a 05 	lds	r25, 0x059A
    1a80:	a0 91 9b 05 	lds	r26, 0x059B
    1a84:	b0 91 9c 05 	lds	r27, 0x059C
    1a88:	80 93 a5 05 	sts	0x05A5, r24
    1a8c:	90 93 a6 05 	sts	0x05A6, r25
    1a90:	a0 93 a7 05 	sts	0x05A7, r26
    1a94:	b0 93 a8 05 	sts	0x05A8, r27
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 07 06 	sts	0x0607, r24
    1a9e:	78 94       	sei
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <OSTaskIdle>:
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <OSTaskIdle+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	f8 94       	cli
    1ab6:	80 91 99 05 	lds	r24, 0x0599
    1aba:	90 91 9a 05 	lds	r25, 0x059A
    1abe:	a0 91 9b 05 	lds	r26, 0x059B
    1ac2:	b0 91 9c 05 	lds	r27, 0x059C
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	b1 1d       	adc	r27, r1
    1acc:	80 93 99 05 	sts	0x0599, r24
    1ad0:	90 93 9a 05 	sts	0x059A, r25
    1ad4:	a0 93 9b 05 	sts	0x059B, r26
    1ad8:	b0 93 9c 05 	sts	0x059C, r27
    1adc:	78 94       	sei
    1ade:	ea cf       	rjmp	.-44     	; 0x1ab4 <OSTaskIdle+0xe>

00001ae0 <OSTaskStat>:
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	2b 97       	sbiw	r28, 0x0b	; 11
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	9f 83       	std	Y+7, r25	; 0x07
    1af6:	8e 83       	std	Y+6, r24	; 0x06
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <OSTaskStat+0x22>
    1afa:	80 e9       	ldi	r24, 0x90	; 144
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
    1b02:	80 91 07 06 	lds	r24, 0x0607
    1b06:	88 23       	and	r24, r24
    1b08:	c1 f3       	breq	.-16     	; 0x1afa <OSTaskStat+0x1a>
    1b0a:	f8 94       	cli
    1b0c:	80 91 99 05 	lds	r24, 0x0599
    1b10:	90 91 9a 05 	lds	r25, 0x059A
    1b14:	a0 91 9b 05 	lds	r26, 0x059B
    1b18:	b0 91 9c 05 	lds	r27, 0x059C
    1b1c:	80 93 88 06 	sts	0x0688, r24
    1b20:	90 93 89 06 	sts	0x0689, r25
    1b24:	a0 93 8a 06 	sts	0x068A, r26
    1b28:	b0 93 8b 06 	sts	0x068B, r27
    1b2c:	80 91 99 05 	lds	r24, 0x0599
    1b30:	90 91 9a 05 	lds	r25, 0x059A
    1b34:	a0 91 9b 05 	lds	r26, 0x059B
    1b38:	b0 91 9c 05 	lds	r27, 0x059C
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	ab 83       	std	Y+3, r26	; 0x03
    1b42:	bc 83       	std	Y+4, r27	; 0x04
    1b44:	10 92 99 05 	sts	0x0599, r1
    1b48:	10 92 9a 05 	sts	0x059A, r1
    1b4c:	10 92 9b 05 	sts	0x059B, r1
    1b50:	10 92 9c 05 	sts	0x059C, r1
    1b54:	78 94       	sei
    1b56:	80 91 a5 05 	lds	r24, 0x05A5
    1b5a:	90 91 a6 05 	lds	r25, 0x05A6
    1b5e:	a0 91 a7 05 	lds	r26, 0x05A7
    1b62:	b0 91 a8 05 	lds	r27, 0x05A8
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	a1 05       	cpc	r26, r1
    1b6a:	b1 05       	cpc	r27, r1
    1b6c:	79 f1       	breq	.+94     	; 0x1bcc <OSTaskStat+0xec>
    1b6e:	29 81       	ldd	r18, Y+1	; 0x01
    1b70:	3a 81       	ldd	r19, Y+2	; 0x02
    1b72:	4b 81       	ldd	r20, Y+3	; 0x03
    1b74:	5c 81       	ldd	r21, Y+4	; 0x04
    1b76:	84 e6       	ldi	r24, 0x64	; 100
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	0e 94 8c 14 	call	0x2918	; 0x2918 <__muluhisi3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	20 91 a5 05 	lds	r18, 0x05A5
    1b88:	30 91 a6 05 	lds	r19, 0x05A6
    1b8c:	40 91 a7 05 	lds	r20, 0x05A7
    1b90:	50 91 a8 05 	lds	r21, 0x05A8
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__udivmodsi4>
    1b9c:	da 01       	movw	r26, r20
    1b9e:	c9 01       	movw	r24, r18
    1ba0:	94 e6       	ldi	r25, 0x64	; 100
    1ba2:	29 2f       	mov	r18, r25
    1ba4:	28 1b       	sub	r18, r24
    1ba6:	82 2f       	mov	r24, r18
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	85 36       	cpi	r24, 0x65	; 101
    1bae:	24 f0       	brlt	.+8      	; 0x1bb8 <OSTaskStat+0xd8>
    1bb0:	84 e6       	ldi	r24, 0x64	; 100
    1bb2:	80 93 ab 05 	sts	0x05AB, r24
    1bb6:	0c c0       	rjmp	.+24     	; 0x1bd0 <OSTaskStat+0xf0>
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	88 23       	and	r24, r24
    1bbc:	1c f4       	brge	.+6      	; 0x1bc4 <OSTaskStat+0xe4>
    1bbe:	10 92 ab 05 	sts	0x05AB, r1
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <OSTaskStat+0xf0>
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	80 93 ab 05 	sts	0x05AB, r24
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <OSTaskStat+0xf0>
    1bcc:	10 92 ab 05 	sts	0x05AB, r1
    1bd0:	0e 94 5f 09 	call	0x12be	; 0x12be <OSTaskStatHook>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <OSTimeDly>
    1bdc:	96 cf       	rjmp	.-212    	; 0x1b0a <OSTaskStat+0x2a>

00001bde <OSTCBInit>:
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	2f 97       	sbiw	r28, 0x0f	; 15
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
    1c00:	7d 83       	std	Y+5, r23	; 0x05
    1c02:	6c 83       	std	Y+4, r22	; 0x04
    1c04:	5f 83       	std	Y+7, r21	; 0x07
    1c06:	4e 83       	std	Y+6, r20	; 0x06
    1c08:	39 87       	std	Y+9, r19	; 0x09
    1c0a:	28 87       	std	Y+8, r18	; 0x08
    1c0c:	1b 87       	std	Y+11, r17	; 0x0b
    1c0e:	0a 87       	std	Y+10, r16	; 0x0a
    1c10:	fd 86       	std	Y+13, r15	; 0x0d
    1c12:	ec 86       	std	Y+12, r14	; 0x0c
    1c14:	df 86       	std	Y+15, r13	; 0x0f
    1c16:	ce 86       	std	Y+14, r12	; 0x0e
    1c18:	f8 94       	cli
    1c1a:	80 91 a9 05 	lds	r24, 0x05A9
    1c1e:	90 91 aa 05 	lds	r25, 0x05AA
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <OSTCBInit+0x52>
    1c2e:	aa c0       	rjmp	.+340    	; 0x1d84 <OSTCBInit+0x1a6>
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	fc 01       	movw	r30, r24
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	90 93 aa 05 	sts	0x05AA, r25
    1c3e:	80 93 a9 05 	sts	0x05A9, r24
    1c42:	78 94       	sei
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	31 83       	std	Z+1, r19	; 0x01
    1c50:	20 83       	st	Z, r18
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	2b 81       	ldd	r18, Y+3	; 0x03
    1c58:	fc 01       	movw	r30, r24
    1c5a:	25 87       	std	Z+13, r18	; 0x0d
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	fc 01       	movw	r30, r24
    1c62:	14 86       	std	Z+12, r1	; 0x0c
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	fc 01       	movw	r30, r24
    1c6a:	13 86       	std	Z+11, r1	; 0x0b
    1c6c:	12 86       	std	Z+10, r1	; 0x0a
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	28 2f       	mov	r18, r24
    1c72:	26 95       	lsr	r18
    1c74:	26 95       	lsr	r18
    1c76:	26 95       	lsr	r18
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	27 87       	std	Z+15, r18	; 0x0f
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	fc 01       	movw	r30, r24
    1c86:	87 85       	ldd	r24, Z+15	; 0x0f
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	80 5c       	subi	r24, 0xC0	; 192
    1c8e:	9e 4f       	sbci	r25, 0xFE	; 254
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 81       	ld	r18, Z
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	fc 01       	movw	r30, r24
    1c9a:	21 8b       	std	Z+17, r18	; 0x11
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	27 70       	andi	r18, 0x07	; 7
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	26 87       	std	Z+14, r18	; 0x0e
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	fc 01       	movw	r30, r24
    1cb0:	86 85       	ldd	r24, Z+14	; 0x0e
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	80 5c       	subi	r24, 0xC0	; 192
    1cb8:	9e 4f       	sbci	r25, 0xFE	; 254
    1cba:	fc 01       	movw	r30, r24
    1cbc:	20 81       	ld	r18, Z
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	20 8b       	std	Z+16, r18	; 0x10
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	fc 01       	movw	r30, r24
    1ccc:	17 82       	std	Z+7, r1	; 0x07
    1cce:	16 82       	std	Z+6, r1	; 0x06
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	11 86       	std	Z+9, r1	; 0x09
    1cd8:	10 86       	std	Z+8, r1	; 0x08
    1cda:	f8 94       	cli
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	88 5f       	subi	r24, 0xF8	; 248
    1ce8:	99 4f       	sbci	r25, 0xF9	; 249
    1cea:	29 81       	ldd	r18, Y+1	; 0x01
    1cec:	3a 81       	ldd	r19, Y+2	; 0x02
    1cee:	fc 01       	movw	r30, r24
    1cf0:	31 83       	std	Z+1, r19	; 0x01
    1cf2:	20 83       	st	Z, r18
    1cf4:	20 91 9f 05 	lds	r18, 0x059F
    1cf8:	30 91 a0 05 	lds	r19, 0x05A0
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	fc 01       	movw	r30, r24
    1d02:	33 83       	std	Z+3, r19	; 0x03
    1d04:	22 83       	std	Z+2, r18	; 0x02
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	15 82       	std	Z+5, r1	; 0x05
    1d0e:	14 82       	std	Z+4, r1	; 0x04
    1d10:	80 91 9f 05 	lds	r24, 0x059F
    1d14:	90 91 a0 05 	lds	r25, 0x05A0
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	49 f0       	breq	.+18     	; 0x1d2e <OSTCBInit+0x150>
    1d1c:	80 91 9f 05 	lds	r24, 0x059F
    1d20:	90 91 a0 05 	lds	r25, 0x05A0
    1d24:	29 81       	ldd	r18, Y+1	; 0x01
    1d26:	3a 81       	ldd	r19, Y+2	; 0x02
    1d28:	fc 01       	movw	r30, r24
    1d2a:	35 83       	std	Z+5, r19	; 0x05
    1d2c:	24 83       	std	Z+4, r18	; 0x04
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	90 93 a0 05 	sts	0x05A0, r25
    1d36:	80 93 9f 05 	sts	0x059F, r24
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	fc 01       	movw	r30, r24
    1d40:	91 89       	ldd	r25, Z+17	; 0x11
    1d42:	80 91 af 05 	lds	r24, 0x05AF
    1d46:	89 2b       	or	r24, r25
    1d48:	80 93 af 05 	sts	0x05AF, r24
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	fc 01       	movw	r30, r24
    1d52:	87 85       	ldd	r24, Z+15	; 0x0f
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	29 81       	ldd	r18, Y+1	; 0x01
    1d5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d5c:	f9 01       	movw	r30, r18
    1d5e:	27 85       	ldd	r18, Z+15	; 0x0f
    1d60:	22 2f       	mov	r18, r18
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	20 55       	subi	r18, 0x50	; 80
    1d66:	3a 4f       	sbci	r19, 0xFA	; 250
    1d68:	f9 01       	movw	r30, r18
    1d6a:	40 81       	ld	r20, Z
    1d6c:	29 81       	ldd	r18, Y+1	; 0x01
    1d6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d70:	f9 01       	movw	r30, r18
    1d72:	20 89       	ldd	r18, Z+16	; 0x10
    1d74:	24 2b       	or	r18, r20
    1d76:	80 55       	subi	r24, 0x50	; 80
    1d78:	9a 4f       	sbci	r25, 0xFA	; 250
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	20 83       	st	Z, r18
    1d7e:	78 94       	sei
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <OSTCBInit+0x1aa>
    1d84:	78 94       	sei
    1d86:	86 e4       	ldi	r24, 0x46	; 70
    1d88:	2f 96       	adiw	r28, 0x0f	; 15
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	08 95       	ret

00001da6 <OSTimeTick>:
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <OSTimeTick+0x6>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	0e 94 66 09 	call	0x12cc	; 0x12cc <OSTimeTickHook>
    1db4:	80 91 9f 05 	lds	r24, 0x059F
    1db8:	90 91 a0 05 	lds	r25, 0x05A0
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	59 c0       	rjmp	.+178    	; 0x1e74 <OSTimeTick+0xce>
    1dc2:	f8 94       	cli
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	fc 01       	movw	r30, r24
    1dca:	82 85       	ldd	r24, Z+10	; 0x0a
    1dcc:	93 85       	ldd	r25, Z+11	; 0x0b
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <OSTimeTick+0x2e>
    1dd2:	48 c0       	rjmp	.+144    	; 0x1e64 <OSTimeTick+0xbe>
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	fc 01       	movw	r30, r24
    1dda:	82 85       	ldd	r24, Z+10	; 0x0a
    1ddc:	93 85       	ldd	r25, Z+11	; 0x0b
    1dde:	9c 01       	movw	r18, r24
    1de0:	21 50       	subi	r18, 0x01	; 1
    1de2:	31 09       	sbc	r19, r1
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	fc 01       	movw	r30, r24
    1dea:	33 87       	std	Z+11, r19	; 0x0b
    1dec:	22 87       	std	Z+10, r18	; 0x0a
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	fc 01       	movw	r30, r24
    1df4:	82 85       	ldd	r24, Z+10	; 0x0a
    1df6:	93 85       	ldd	r25, Z+11	; 0x0b
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	a1 f5       	brne	.+104    	; 0x1e64 <OSTimeTick+0xbe>
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	fc 01       	movw	r30, r24
    1e02:	84 85       	ldd	r24, Z+12	; 0x0c
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 70       	andi	r24, 0x08	; 8
    1e0a:	99 27       	eor	r25, r25
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	19 f5       	brne	.+70     	; 0x1e56 <OSTimeTick+0xb0>
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	fc 01       	movw	r30, r24
    1e16:	91 89       	ldd	r25, Z+17	; 0x11
    1e18:	80 91 af 05 	lds	r24, 0x05AF
    1e1c:	89 2b       	or	r24, r25
    1e1e:	80 93 af 05 	sts	0x05AF, r24
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	fc 01       	movw	r30, r24
    1e28:	87 85       	ldd	r24, Z+15	; 0x0f
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	29 81       	ldd	r18, Y+1	; 0x01
    1e30:	3a 81       	ldd	r19, Y+2	; 0x02
    1e32:	f9 01       	movw	r30, r18
    1e34:	27 85       	ldd	r18, Z+15	; 0x0f
    1e36:	22 2f       	mov	r18, r18
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	20 55       	subi	r18, 0x50	; 80
    1e3c:	3a 4f       	sbci	r19, 0xFA	; 250
    1e3e:	f9 01       	movw	r30, r18
    1e40:	40 81       	ld	r20, Z
    1e42:	29 81       	ldd	r18, Y+1	; 0x01
    1e44:	3a 81       	ldd	r19, Y+2	; 0x02
    1e46:	f9 01       	movw	r30, r18
    1e48:	20 89       	ldd	r18, Z+16	; 0x10
    1e4a:	24 2b       	or	r18, r20
    1e4c:	80 55       	subi	r24, 0x50	; 80
    1e4e:	9a 4f       	sbci	r25, 0xFA	; 250
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18
    1e54:	07 c0       	rjmp	.+14     	; 0x1e64 <OSTimeTick+0xbe>
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	21 e0       	ldi	r18, 0x01	; 1
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	fc 01       	movw	r30, r24
    1e60:	33 87       	std	Z+11, r19	; 0x0b
    1e62:	22 87       	std	Z+10, r18	; 0x0a
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	fc 01       	movw	r30, r24
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	78 94       	sei
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
    1e78:	fc 01       	movw	r30, r24
    1e7a:	85 85       	ldd	r24, Z+13	; 0x0d
    1e7c:	8f 33       	cpi	r24, 0x3F	; 63
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <OSTimeTick+0xdc>
    1e80:	a0 cf       	rjmp	.-192    	; 0x1dc2 <OSTimeTick+0x1c>
    1e82:	f8 94       	cli
    1e84:	80 91 bd 05 	lds	r24, 0x05BD
    1e88:	90 91 be 05 	lds	r25, 0x05BE
    1e8c:	a0 91 bf 05 	lds	r26, 0x05BF
    1e90:	b0 91 c0 05 	lds	r27, 0x05C0
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	a1 1d       	adc	r26, r1
    1e98:	b1 1d       	adc	r27, r1
    1e9a:	80 93 bd 05 	sts	0x05BD, r24
    1e9e:	90 93 be 05 	sts	0x05BE, r25
    1ea2:	a0 93 bf 05 	sts	0x05BF, r26
    1ea6:	b0 93 c0 05 	sts	0x05C0, r27
    1eaa:	78 94       	sei
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <OSMboxAccept>:
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <OSMboxAccept+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <OSMboxAccept+0x8>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	f8 94       	cli
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	fc 01       	movw	r30, r24
    1ece:	84 85       	ldd	r24, Z+12	; 0x0c
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	21 f0       	breq	.+8      	; 0x1edc <OSMboxAccept+0x26>
    1ed4:	78 94       	sei
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <OSMboxAccept+0x4c>
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <OSMboxAccept+0x46>
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	11 82       	std	Z+1, r1	; 0x01
    1efa:	10 82       	st	Z, r1
    1efc:	78 94       	sei
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <OSMboxCreate>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <OSMboxCreate+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <OSMboxCreate+0x8>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	f8 94       	cli
    1f22:	80 91 b8 05 	lds	r24, 0x05B8
    1f26:	90 91 b9 05 	lds	r25, 0x05B9
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	80 91 b8 05 	lds	r24, 0x05B8
    1f32:	90 91 b9 05 	lds	r25, 0x05B9
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	59 f0       	breq	.+22     	; 0x1f50 <OSMboxCreate+0x40>
    1f3a:	80 91 b8 05 	lds	r24, 0x05B8
    1f3e:	90 91 b9 05 	lds	r25, 0x05B9
    1f42:	fc 01       	movw	r30, r24
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	90 93 b9 05 	sts	0x05B9, r25
    1f4c:	80 93 b8 05 	sts	0x05B8, r24
    1f50:	78 94       	sei
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	81 f0       	breq	.+32     	; 0x1f7a <OSMboxCreate+0x6a>
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	21 e0       	ldi	r18, 0x01	; 1
    1f60:	fc 01       	movw	r30, r24
    1f62:	24 87       	std	Z+12, r18	; 0x0c
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	31 83       	std	Z+1, r19	; 0x01
    1f70:	20 83       	st	Z, r18
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	0e 94 0e 0b 	call	0x161c	; 0x161c <OSEventWaitListInit>
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <OSMboxPend>:
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	28 97       	sbiw	r28, 0x08	; 8
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	7e 83       	std	Y+6, r23	; 0x06
    1fa6:	6d 83       	std	Y+5, r22	; 0x05
    1fa8:	58 87       	std	Y+8, r21	; 0x08
    1faa:	4f 83       	std	Y+7, r20	; 0x07
    1fac:	f8 94       	cli
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	84 85       	ldd	r24, Z+12	; 0x0c
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	49 f0       	breq	.+18     	; 0x1fcc <OSMboxPend+0x40>
    1fba:	78 94       	sei
    1fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fbe:	98 85       	ldd	r25, Y+8	; 0x08
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	99 c0       	rjmp	.+306    	; 0x20fe <OSMboxPend+0x172>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	59 f0       	breq	.+22     	; 0x1ff8 <OSMboxPend+0x6c>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	11 82       	std	Z+1, r1	; 0x01
    1fea:	10 82       	st	Z, r1
    1fec:	78 94       	sei
    1fee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff0:	98 85       	ldd	r25, Y+8	; 0x08
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	10 82       	st	Z, r1
    1ff6:	81 c0       	rjmp	.+258    	; 0x20fa <OSMboxPend+0x16e>
    1ff8:	80 91 ba 05 	lds	r24, 0x05BA
    1ffc:	88 23       	and	r24, r24
    1ffe:	39 f0       	breq	.+14     	; 0x200e <OSMboxPend+0x82>
    2000:	78 94       	sei
    2002:	8f 81       	ldd	r24, Y+7	; 0x07
    2004:	98 85       	ldd	r25, Y+8	; 0x08
    2006:	22 e0       	ldi	r18, 0x02	; 2
    2008:	fc 01       	movw	r30, r24
    200a:	20 83       	st	Z, r18
    200c:	76 c0       	rjmp	.+236    	; 0x20fa <OSMboxPend+0x16e>
    200e:	80 91 bb 05 	lds	r24, 0x05BB
    2012:	90 91 bc 05 	lds	r25, 0x05BC
    2016:	20 91 bb 05 	lds	r18, 0x05BB
    201a:	30 91 bc 05 	lds	r19, 0x05BC
    201e:	f9 01       	movw	r30, r18
    2020:	24 85       	ldd	r18, Z+12	; 0x0c
    2022:	22 60       	ori	r18, 0x02	; 2
    2024:	fc 01       	movw	r30, r24
    2026:	24 87       	std	Z+12, r18	; 0x0c
    2028:	80 91 bb 05 	lds	r24, 0x05BB
    202c:	90 91 bc 05 	lds	r25, 0x05BC
    2030:	2d 81       	ldd	r18, Y+5	; 0x05
    2032:	3e 81       	ldd	r19, Y+6	; 0x06
    2034:	fc 01       	movw	r30, r24
    2036:	33 87       	std	Z+11, r19	; 0x0b
    2038:	22 87       	std	Z+10, r18	; 0x0a
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	0e 94 30 0a 	call	0x1460	; 0x1460 <OSEventTaskWait>
    2042:	78 94       	sei
    2044:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <OSSched>
    2048:	f8 94       	cli
    204a:	80 91 bb 05 	lds	r24, 0x05BB
    204e:	90 91 bc 05 	lds	r25, 0x05BC
    2052:	fc 01       	movw	r30, r24
    2054:	80 85       	ldd	r24, Z+8	; 0x08
    2056:	91 85       	ldd	r25, Z+9	; 0x09
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	d1 f0       	breq	.+52     	; 0x2098 <OSMboxPend+0x10c>
    2064:	80 91 bb 05 	lds	r24, 0x05BB
    2068:	90 91 bc 05 	lds	r25, 0x05BC
    206c:	fc 01       	movw	r30, r24
    206e:	11 86       	std	Z+9, r1	; 0x09
    2070:	10 86       	std	Z+8, r1	; 0x08
    2072:	80 91 bb 05 	lds	r24, 0x05BB
    2076:	90 91 bc 05 	lds	r25, 0x05BC
    207a:	fc 01       	movw	r30, r24
    207c:	14 86       	std	Z+12, r1	; 0x0c
    207e:	80 91 bb 05 	lds	r24, 0x05BB
    2082:	90 91 bc 05 	lds	r25, 0x05BC
    2086:	fc 01       	movw	r30, r24
    2088:	17 82       	std	Z+7, r1	; 0x07
    208a:	16 82       	std	Z+6, r1	; 0x06
    208c:	78 94       	sei
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	fc 01       	movw	r30, r24
    2094:	10 82       	st	Z, r1
    2096:	31 c0       	rjmp	.+98     	; 0x20fa <OSMboxPend+0x16e>
    2098:	80 91 bb 05 	lds	r24, 0x05BB
    209c:	90 91 bc 05 	lds	r25, 0x05BC
    20a0:	fc 01       	movw	r30, r24
    20a2:	84 85       	ldd	r24, Z+12	; 0x0c
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	82 70       	andi	r24, 0x02	; 2
    20aa:	99 27       	eor	r25, r25
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f0       	breq	.+26     	; 0x20ca <OSMboxPend+0x13e>
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OSEventTO>
    20b8:	78 94       	sei
    20ba:	1a 82       	std	Y+2, r1	; 0x02
    20bc:	19 82       	std	Y+1, r1	; 0x01
    20be:	8f 81       	ldd	r24, Y+7	; 0x07
    20c0:	98 85       	ldd	r25, Y+8	; 0x08
    20c2:	2a e0       	ldi	r18, 0x0A	; 10
    20c4:	fc 01       	movw	r30, r24
    20c6:	20 83       	st	Z, r18
    20c8:	18 c0       	rjmp	.+48     	; 0x20fa <OSMboxPend+0x16e>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	fc 01       	movw	r30, r24
    20de:	11 82       	std	Z+1, r1	; 0x01
    20e0:	10 82       	st	Z, r1
    20e2:	80 91 bb 05 	lds	r24, 0x05BB
    20e6:	90 91 bc 05 	lds	r25, 0x05BC
    20ea:	fc 01       	movw	r30, r24
    20ec:	17 82       	std	Z+7, r1	; 0x07
    20ee:	16 82       	std	Z+6, r1	; 0x06
    20f0:	78 94       	sei
    20f2:	8f 81       	ldd	r24, Y+7	; 0x07
    20f4:	98 85       	ldd	r25, Y+8	; 0x08
    20f6:	fc 01       	movw	r30, r24
    20f8:	10 82       	st	Z, r1
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	28 96       	adiw	r28, 0x08	; 8
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <OSMboxPost>:
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	00 d0       	rcall	.+0      	; 0x2116 <OSMboxPost+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <OSMboxPost+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	7c 83       	std	Y+4, r23	; 0x04
    2122:	6b 83       	std	Y+3, r22	; 0x03
    2124:	f8 94       	cli
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	fc 01       	movw	r30, r24
    212c:	84 85       	ldd	r24, Z+12	; 0x0c
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	19 f0       	breq	.+6      	; 0x2138 <OSMboxPost+0x28>
    2132:	78 94       	sei
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	26 c0       	rjmp	.+76     	; 0x2184 <OSMboxPost+0x74>
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	fc 01       	movw	r30, r24
    213e:	85 85       	ldd	r24, Z+13	; 0x0d
    2140:	88 23       	and	r24, r24
    2142:	69 f0       	breq	.+26     	; 0x215e <OSMboxPost+0x4e>
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	42 e0       	ldi	r20, 0x02	; 2
    214e:	b9 01       	movw	r22, r18
    2150:	0e 94 6d 09 	call	0x12da	; 0x12da <OSEventTaskRdy>
    2154:	78 94       	sei
    2156:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <OSSched>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	13 c0       	rjmp	.+38     	; 0x2184 <OSMboxPost+0x74>
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	fc 01       	movw	r30, r24
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	19 f0       	breq	.+6      	; 0x2172 <OSMboxPost+0x62>
    216c:	78 94       	sei
    216e:	84 e1       	ldi	r24, 0x14	; 20
    2170:	09 c0       	rjmp	.+18     	; 0x2184 <OSMboxPost+0x74>
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	3c 81       	ldd	r19, Y+4	; 0x04
    217a:	fc 01       	movw	r30, r24
    217c:	31 83       	std	Z+1, r19	; 0x01
    217e:	20 83       	st	Z, r18
    2180:	78 94       	sei
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <OSSemCreate>:
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	00 d0       	rcall	.+0      	; 0x2198 <OSSemCreate+0x6>
    2198:	00 d0       	rcall	.+0      	; 0x219a <OSSemCreate+0x8>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	f8 94       	cli
    21a4:	80 91 b8 05 	lds	r24, 0x05B8
    21a8:	90 91 b9 05 	lds	r25, 0x05B9
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	80 91 b8 05 	lds	r24, 0x05B8
    21b4:	90 91 b9 05 	lds	r25, 0x05B9
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	59 f0       	breq	.+22     	; 0x21d2 <OSSemCreate+0x40>
    21bc:	80 91 b8 05 	lds	r24, 0x05B8
    21c0:	90 91 b9 05 	lds	r25, 0x05B9
    21c4:	fc 01       	movw	r30, r24
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	90 93 b9 05 	sts	0x05B9, r25
    21ce:	80 93 b8 05 	sts	0x05B8, r24
    21d2:	78 94       	sei
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	81 f0       	breq	.+32     	; 0x21fc <OSSemCreate+0x6a>
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	23 e0       	ldi	r18, 0x03	; 3
    21e2:	fc 01       	movw	r30, r24
    21e4:	24 87       	std	Z+12, r18	; 0x0c
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	2b 81       	ldd	r18, Y+3	; 0x03
    21ec:	3c 81       	ldd	r19, Y+4	; 0x04
    21ee:	fc 01       	movw	r30, r24
    21f0:	33 87       	std	Z+11, r19	; 0x0b
    21f2:	22 87       	std	Z+10, r18	; 0x0a
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	0e 94 0e 0b 	call	0x161c	; 0x161c <OSEventWaitListInit>
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <OSSemPend>:
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	00 d0       	rcall	.+0      	; 0x2214 <OSSemPend+0x6>
    2214:	00 d0       	rcall	.+0      	; 0x2216 <OSSemPend+0x8>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <OSSemPend+0xa>
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	7c 83       	std	Y+4, r23	; 0x04
    2222:	6b 83       	std	Y+3, r22	; 0x03
    2224:	5e 83       	std	Y+6, r21	; 0x06
    2226:	4d 83       	std	Y+5, r20	; 0x05
    2228:	f8 94       	cli
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	fc 01       	movw	r30, r24
    2230:	84 85       	ldd	r24, Z+12	; 0x0c
    2232:	83 30       	cpi	r24, 0x03	; 3
    2234:	31 f0       	breq	.+12     	; 0x2242 <OSSemPend+0x34>
    2236:	78 94       	sei
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	21 e0       	ldi	r18, 0x01	; 1
    223e:	fc 01       	movw	r30, r24
    2240:	20 83       	st	Z, r18
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	fc 01       	movw	r30, r24
    2248:	82 85       	ldd	r24, Z+10	; 0x0a
    224a:	93 85       	ldd	r25, Z+11	; 0x0b
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	99 f0       	breq	.+38     	; 0x2276 <OSSemPend+0x68>
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	fc 01       	movw	r30, r24
    2256:	82 85       	ldd	r24, Z+10	; 0x0a
    2258:	93 85       	ldd	r25, Z+11	; 0x0b
    225a:	9c 01       	movw	r18, r24
    225c:	21 50       	subi	r18, 0x01	; 1
    225e:	31 09       	sbc	r19, r1
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	fc 01       	movw	r30, r24
    2266:	33 87       	std	Z+11, r19	; 0x0b
    2268:	22 87       	std	Z+10, r18	; 0x0a
    226a:	78 94       	sei
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	fc 01       	movw	r30, r24
    2272:	10 82       	st	Z, r1
    2274:	4c c0       	rjmp	.+152    	; 0x230e <OSSemPend+0x100>
    2276:	80 91 ba 05 	lds	r24, 0x05BA
    227a:	88 23       	and	r24, r24
    227c:	39 f0       	breq	.+14     	; 0x228c <OSSemPend+0x7e>
    227e:	78 94       	sei
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	22 e0       	ldi	r18, 0x02	; 2
    2286:	fc 01       	movw	r30, r24
    2288:	20 83       	st	Z, r18
    228a:	41 c0       	rjmp	.+130    	; 0x230e <OSSemPend+0x100>
    228c:	80 91 bb 05 	lds	r24, 0x05BB
    2290:	90 91 bc 05 	lds	r25, 0x05BC
    2294:	20 91 bb 05 	lds	r18, 0x05BB
    2298:	30 91 bc 05 	lds	r19, 0x05BC
    229c:	f9 01       	movw	r30, r18
    229e:	24 85       	ldd	r18, Z+12	; 0x0c
    22a0:	21 60       	ori	r18, 0x01	; 1
    22a2:	fc 01       	movw	r30, r24
    22a4:	24 87       	std	Z+12, r18	; 0x0c
    22a6:	80 91 bb 05 	lds	r24, 0x05BB
    22aa:	90 91 bc 05 	lds	r25, 0x05BC
    22ae:	2b 81       	ldd	r18, Y+3	; 0x03
    22b0:	3c 81       	ldd	r19, Y+4	; 0x04
    22b2:	fc 01       	movw	r30, r24
    22b4:	33 87       	std	Z+11, r19	; 0x0b
    22b6:	22 87       	std	Z+10, r18	; 0x0a
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	0e 94 30 0a 	call	0x1460	; 0x1460 <OSEventTaskWait>
    22c0:	78 94       	sei
    22c2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <OSSched>
    22c6:	f8 94       	cli
    22c8:	80 91 bb 05 	lds	r24, 0x05BB
    22cc:	90 91 bc 05 	lds	r25, 0x05BC
    22d0:	fc 01       	movw	r30, r24
    22d2:	84 85       	ldd	r24, Z+12	; 0x0c
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	81 70       	andi	r24, 0x01	; 1
    22da:	99 27       	eor	r25, r25
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	59 f0       	breq	.+22     	; 0x22f6 <OSSemPend+0xe8>
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OSEventTO>
    22e8:	78 94       	sei
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	2a e0       	ldi	r18, 0x0A	; 10
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	0c c0       	rjmp	.+24     	; 0x230e <OSSemPend+0x100>
    22f6:	80 91 bb 05 	lds	r24, 0x05BB
    22fa:	90 91 bc 05 	lds	r25, 0x05BC
    22fe:	fc 01       	movw	r30, r24
    2300:	17 82       	std	Z+7, r1	; 0x07
    2302:	16 82       	std	Z+6, r1	; 0x06
    2304:	78 94       	sei
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	fc 01       	movw	r30, r24
    230c:	10 82       	st	Z, r1
    230e:	26 96       	adiw	r28, 0x06	; 6
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <OSSemPost>:
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	00 d0       	rcall	.+0      	; 0x2326 <OSSemPost+0x6>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	f8 94       	cli
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	fc 01       	movw	r30, r24
    2336:	84 85       	ldd	r24, Z+12	; 0x0c
    2338:	83 30       	cpi	r24, 0x03	; 3
    233a:	19 f0       	breq	.+6      	; 0x2342 <OSSemPost+0x22>
    233c:	78 94       	sei
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	2d c0       	rjmp	.+90     	; 0x239c <OSSemPost+0x7c>
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	fc 01       	movw	r30, r24
    2348:	85 85       	ldd	r24, Z+13	; 0x0d
    234a:	88 23       	and	r24, r24
    234c:	61 f0       	breq	.+24     	; 0x2366 <OSSemPost+0x46>
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	0e 94 6d 09 	call	0x12da	; 0x12da <OSEventTaskRdy>
    235c:	78 94       	sei
    235e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <OSSched>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	1b c0       	rjmp	.+54     	; 0x239c <OSSemPost+0x7c>
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	fc 01       	movw	r30, r24
    236c:	82 85       	ldd	r24, Z+10	; 0x0a
    236e:	93 85       	ldd	r25, Z+11	; 0x0b
    2370:	8f 3f       	cpi	r24, 0xFF	; 255
    2372:	ff ef       	ldi	r31, 0xFF	; 255
    2374:	9f 07       	cpc	r25, r31
    2376:	81 f0       	breq	.+32     	; 0x2398 <OSSemPost+0x78>
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	fc 01       	movw	r30, r24
    237e:	82 85       	ldd	r24, Z+10	; 0x0a
    2380:	93 85       	ldd	r25, Z+11	; 0x0b
    2382:	9c 01       	movw	r18, r24
    2384:	2f 5f       	subi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	fc 01       	movw	r30, r24
    238e:	33 87       	std	Z+11, r19	; 0x0b
    2390:	22 87       	std	Z+10, r18	; 0x0a
    2392:	78 94       	sei
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	02 c0       	rjmp	.+4      	; 0x239c <OSSemPost+0x7c>
    2398:	78 94       	sei
    239a:	82 e3       	ldi	r24, 0x32	; 50
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <OSTaskCreate>:
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	2a 97       	sbiw	r28, 0x0a	; 10
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	9d 83       	std	Y+5, r25	; 0x05
    23c8:	8c 83       	std	Y+4, r24	; 0x04
    23ca:	7f 83       	std	Y+7, r23	; 0x07
    23cc:	6e 83       	std	Y+6, r22	; 0x06
    23ce:	59 87       	std	Y+9, r21	; 0x09
    23d0:	48 87       	std	Y+8, r20	; 0x08
    23d2:	2a 87       	std	Y+10, r18	; 0x0a
    23d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d6:	80 34       	cpi	r24, 0x40	; 64
    23d8:	10 f0       	brcs	.+4      	; 0x23de <OSTaskCreate+0x38>
    23da:	8a e2       	ldi	r24, 0x2A	; 42
    23dc:	65 c0       	rjmp	.+202    	; 0x24a8 <OSTaskCreate+0x102>
    23de:	f8 94       	cli
    23e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	88 5f       	subi	r24, 0xF8	; 248
    23ec:	99 4f       	sbci	r25, 0xF9	; 249
    23ee:	fc 01       	movw	r30, r24
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	09 f0       	breq	.+2      	; 0x23fa <OSTaskCreate+0x54>
    23f8:	55 c0       	rjmp	.+170    	; 0x24a4 <OSTaskCreate+0xfe>
    23fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 5f       	subi	r24, 0xF8	; 248
    2406:	99 4f       	sbci	r25, 0xF9	; 249
    2408:	21 e0       	ldi	r18, 0x01	; 1
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	fc 01       	movw	r30, r24
    240e:	31 83       	std	Z+1, r19	; 0x01
    2410:	20 83       	st	Z, r18
    2412:	78 94       	sei
    2414:	48 85       	ldd	r20, Y+8	; 0x08
    2416:	59 85       	ldd	r21, Y+9	; 0x09
    2418:	6e 81       	ldd	r22, Y+6	; 0x06
    241a:	7f 81       	ldd	r23, Y+7	; 0x07
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	9d 81       	ldd	r25, Y+5	; 0x05
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <OSTaskStkInit>
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	c1 2c       	mov	r12, r1
    2432:	d1 2c       	mov	r13, r1
    2434:	e1 2c       	mov	r14, r1
    2436:	f1 2c       	mov	r15, r1
    2438:	00 e0       	ldi	r16, 0x00	; 0
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	bc 01       	movw	r22, r24
    2446:	8a 85       	ldd	r24, Y+10	; 0x0a
    2448:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <OSTCBInit>
    244c:	8b 83       	std	Y+3, r24	; 0x03
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	88 23       	and	r24, r24
    2452:	d1 f4       	brne	.+52     	; 0x2488 <OSTaskCreate+0xe2>
    2454:	f8 94       	cli
    2456:	80 91 ac 05 	lds	r24, 0x05AC
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	80 93 ac 05 	sts	0x05AC, r24
    2460:	8a 85       	ldd	r24, Y+10	; 0x0a
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	88 5f       	subi	r24, 0xF8	; 248
    246c:	99 4f       	sbci	r25, 0xF9	; 249
    246e:	fc 01       	movw	r30, r24
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	0e 94 53 09 	call	0x12a6	; 0x12a6 <OSTaskCreateHook>
    2478:	78 94       	sei
    247a:	80 91 98 05 	lds	r24, 0x0598
    247e:	88 23       	and	r24, r24
    2480:	79 f0       	breq	.+30     	; 0x24a0 <OSTaskCreate+0xfa>
    2482:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <OSSched>
    2486:	0c c0       	rjmp	.+24     	; 0x24a0 <OSTaskCreate+0xfa>
    2488:	f8 94       	cli
    248a:	8a 85       	ldd	r24, Y+10	; 0x0a
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	88 5f       	subi	r24, 0xF8	; 248
    2496:	99 4f       	sbci	r25, 0xF9	; 249
    2498:	fc 01       	movw	r30, r24
    249a:	11 82       	std	Z+1, r1	; 0x01
    249c:	10 82       	st	Z, r1
    249e:	78 94       	sei
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <OSTaskCreate+0x102>
    24a4:	78 94       	sei
    24a6:	88 e2       	ldi	r24, 0x28	; 40
    24a8:	2a 96       	adiw	r28, 0x0a	; 10
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	08 95       	ret

000024c6 <OSTimeDly>:
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <OSTimeDly+0x6>
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	09 f4       	brne	.+2      	; 0x24de <OSTimeDly+0x18>
    24dc:	43 c0       	rjmp	.+134    	; 0x2564 <OSTimeDly+0x9e>
    24de:	f8 94       	cli
    24e0:	80 91 bb 05 	lds	r24, 0x05BB
    24e4:	90 91 bc 05 	lds	r25, 0x05BC
    24e8:	fc 01       	movw	r30, r24
    24ea:	87 85       	ldd	r24, Z+15	; 0x0f
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	20 91 bb 05 	lds	r18, 0x05BB
    24f4:	30 91 bc 05 	lds	r19, 0x05BC
    24f8:	f9 01       	movw	r30, r18
    24fa:	27 85       	ldd	r18, Z+15	; 0x0f
    24fc:	22 2f       	mov	r18, r18
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	20 55       	subi	r18, 0x50	; 80
    2502:	3a 4f       	sbci	r19, 0xFA	; 250
    2504:	f9 01       	movw	r30, r18
    2506:	20 81       	ld	r18, Z
    2508:	42 2f       	mov	r20, r18
    250a:	20 91 bb 05 	lds	r18, 0x05BB
    250e:	30 91 bc 05 	lds	r19, 0x05BC
    2512:	f9 01       	movw	r30, r18
    2514:	20 89       	ldd	r18, Z+16	; 0x10
    2516:	20 95       	com	r18
    2518:	24 23       	and	r18, r20
    251a:	42 2f       	mov	r20, r18
    251c:	9c 01       	movw	r18, r24
    251e:	20 55       	subi	r18, 0x50	; 80
    2520:	3a 4f       	sbci	r19, 0xFA	; 250
    2522:	f9 01       	movw	r30, r18
    2524:	40 83       	st	Z, r20
    2526:	80 55       	subi	r24, 0x50	; 80
    2528:	9a 4f       	sbci	r25, 0xFA	; 250
    252a:	fc 01       	movw	r30, r24
    252c:	80 81       	ld	r24, Z
    252e:	88 23       	and	r24, r24
    2530:	69 f4       	brne	.+26     	; 0x254c <OSTimeDly+0x86>
    2532:	80 91 bb 05 	lds	r24, 0x05BB
    2536:	90 91 bc 05 	lds	r25, 0x05BC
    253a:	fc 01       	movw	r30, r24
    253c:	81 89       	ldd	r24, Z+17	; 0x11
    253e:	98 2f       	mov	r25, r24
    2540:	90 95       	com	r25
    2542:	80 91 af 05 	lds	r24, 0x05AF
    2546:	89 23       	and	r24, r25
    2548:	80 93 af 05 	sts	0x05AF, r24
    254c:	80 91 bb 05 	lds	r24, 0x05BB
    2550:	90 91 bc 05 	lds	r25, 0x05BC
    2554:	29 81       	ldd	r18, Y+1	; 0x01
    2556:	3a 81       	ldd	r19, Y+2	; 0x02
    2558:	fc 01       	movw	r30, r24
    255a:	33 87       	std	Z+11, r19	; 0x0b
    255c:	22 87       	std	Z+10, r18	; 0x0a
    255e:	78 94       	sei
    2560:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <OSSched>
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <__subsf3>:
    256e:	50 58       	subi	r21, 0x80	; 128

00002570 <__addsf3>:
    2570:	bb 27       	eor	r27, r27
    2572:	aa 27       	eor	r26, r26
    2574:	0e d0       	rcall	.+28     	; 0x2592 <__addsf3x>
    2576:	0d c1       	rjmp	.+538    	; 0x2792 <__fp_round>
    2578:	fe d0       	rcall	.+508    	; 0x2776 <__fp_pscA>
    257a:	30 f0       	brcs	.+12     	; 0x2588 <__addsf3+0x18>
    257c:	03 d1       	rcall	.+518    	; 0x2784 <__fp_pscB>
    257e:	20 f0       	brcs	.+8      	; 0x2588 <__addsf3+0x18>
    2580:	31 f4       	brne	.+12     	; 0x258e <__addsf3+0x1e>
    2582:	9f 3f       	cpi	r25, 0xFF	; 255
    2584:	11 f4       	brne	.+4      	; 0x258a <__addsf3+0x1a>
    2586:	1e f4       	brtc	.+6      	; 0x258e <__addsf3+0x1e>
    2588:	f3 c0       	rjmp	.+486    	; 0x2770 <__fp_nan>
    258a:	0e f4       	brtc	.+2      	; 0x258e <__addsf3+0x1e>
    258c:	e0 95       	com	r30
    258e:	e7 fb       	bst	r30, 7
    2590:	e9 c0       	rjmp	.+466    	; 0x2764 <__fp_inf>

00002592 <__addsf3x>:
    2592:	e9 2f       	mov	r30, r25
    2594:	0f d1       	rcall	.+542    	; 0x27b4 <__fp_split3>
    2596:	80 f3       	brcs	.-32     	; 0x2578 <__addsf3+0x8>
    2598:	ba 17       	cp	r27, r26
    259a:	62 07       	cpc	r22, r18
    259c:	73 07       	cpc	r23, r19
    259e:	84 07       	cpc	r24, r20
    25a0:	95 07       	cpc	r25, r21
    25a2:	18 f0       	brcs	.+6      	; 0x25aa <__addsf3x+0x18>
    25a4:	71 f4       	brne	.+28     	; 0x25c2 <__addsf3x+0x30>
    25a6:	9e f5       	brtc	.+102    	; 0x260e <__addsf3x+0x7c>
    25a8:	27 c1       	rjmp	.+590    	; 0x27f8 <__fp_zero>
    25aa:	0e f4       	brtc	.+2      	; 0x25ae <__addsf3x+0x1c>
    25ac:	e0 95       	com	r30
    25ae:	0b 2e       	mov	r0, r27
    25b0:	ba 2f       	mov	r27, r26
    25b2:	a0 2d       	mov	r26, r0
    25b4:	0b 01       	movw	r0, r22
    25b6:	b9 01       	movw	r22, r18
    25b8:	90 01       	movw	r18, r0
    25ba:	0c 01       	movw	r0, r24
    25bc:	ca 01       	movw	r24, r20
    25be:	a0 01       	movw	r20, r0
    25c0:	11 24       	eor	r1, r1
    25c2:	ff 27       	eor	r31, r31
    25c4:	59 1b       	sub	r21, r25
    25c6:	99 f0       	breq	.+38     	; 0x25ee <__addsf3x+0x5c>
    25c8:	59 3f       	cpi	r21, 0xF9	; 249
    25ca:	50 f4       	brcc	.+20     	; 0x25e0 <__addsf3x+0x4e>
    25cc:	50 3e       	cpi	r21, 0xE0	; 224
    25ce:	68 f1       	brcs	.+90     	; 0x262a <__addsf3x+0x98>
    25d0:	1a 16       	cp	r1, r26
    25d2:	f0 40       	sbci	r31, 0x00	; 0
    25d4:	a2 2f       	mov	r26, r18
    25d6:	23 2f       	mov	r18, r19
    25d8:	34 2f       	mov	r19, r20
    25da:	44 27       	eor	r20, r20
    25dc:	58 5f       	subi	r21, 0xF8	; 248
    25de:	f3 cf       	rjmp	.-26     	; 0x25c6 <__addsf3x+0x34>
    25e0:	46 95       	lsr	r20
    25e2:	37 95       	ror	r19
    25e4:	27 95       	ror	r18
    25e6:	a7 95       	ror	r26
    25e8:	f0 40       	sbci	r31, 0x00	; 0
    25ea:	53 95       	inc	r21
    25ec:	c9 f7       	brne	.-14     	; 0x25e0 <__addsf3x+0x4e>
    25ee:	7e f4       	brtc	.+30     	; 0x260e <__addsf3x+0x7c>
    25f0:	1f 16       	cp	r1, r31
    25f2:	ba 0b       	sbc	r27, r26
    25f4:	62 0b       	sbc	r22, r18
    25f6:	73 0b       	sbc	r23, r19
    25f8:	84 0b       	sbc	r24, r20
    25fa:	ba f0       	brmi	.+46     	; 0x262a <__addsf3x+0x98>
    25fc:	91 50       	subi	r25, 0x01	; 1
    25fe:	a1 f0       	breq	.+40     	; 0x2628 <__addsf3x+0x96>
    2600:	ff 0f       	add	r31, r31
    2602:	bb 1f       	adc	r27, r27
    2604:	66 1f       	adc	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	88 1f       	adc	r24, r24
    260a:	c2 f7       	brpl	.-16     	; 0x25fc <__addsf3x+0x6a>
    260c:	0e c0       	rjmp	.+28     	; 0x262a <__addsf3x+0x98>
    260e:	ba 0f       	add	r27, r26
    2610:	62 1f       	adc	r22, r18
    2612:	73 1f       	adc	r23, r19
    2614:	84 1f       	adc	r24, r20
    2616:	48 f4       	brcc	.+18     	; 0x262a <__addsf3x+0x98>
    2618:	87 95       	ror	r24
    261a:	77 95       	ror	r23
    261c:	67 95       	ror	r22
    261e:	b7 95       	ror	r27
    2620:	f7 95       	ror	r31
    2622:	9e 3f       	cpi	r25, 0xFE	; 254
    2624:	08 f0       	brcs	.+2      	; 0x2628 <__addsf3x+0x96>
    2626:	b3 cf       	rjmp	.-154    	; 0x258e <__addsf3+0x1e>
    2628:	93 95       	inc	r25
    262a:	88 0f       	add	r24, r24
    262c:	08 f0       	brcs	.+2      	; 0x2630 <__addsf3x+0x9e>
    262e:	99 27       	eor	r25, r25
    2630:	ee 0f       	add	r30, r30
    2632:	97 95       	ror	r25
    2634:	87 95       	ror	r24
    2636:	08 95       	ret

00002638 <__cmpsf2>:
    2638:	71 d0       	rcall	.+226    	; 0x271c <__fp_cmp>
    263a:	08 f4       	brcc	.+2      	; 0x263e <__cmpsf2+0x6>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	08 95       	ret

00002640 <__fixsfsi>:
    2640:	04 d0       	rcall	.+8      	; 0x264a <__fixunssfsi>
    2642:	68 94       	set
    2644:	b1 11       	cpse	r27, r1
    2646:	d9 c0       	rjmp	.+434    	; 0x27fa <__fp_szero>
    2648:	08 95       	ret

0000264a <__fixunssfsi>:
    264a:	bc d0       	rcall	.+376    	; 0x27c4 <__fp_splitA>
    264c:	88 f0       	brcs	.+34     	; 0x2670 <__fixunssfsi+0x26>
    264e:	9f 57       	subi	r25, 0x7F	; 127
    2650:	90 f0       	brcs	.+36     	; 0x2676 <__fixunssfsi+0x2c>
    2652:	b9 2f       	mov	r27, r25
    2654:	99 27       	eor	r25, r25
    2656:	b7 51       	subi	r27, 0x17	; 23
    2658:	a0 f0       	brcs	.+40     	; 0x2682 <__fixunssfsi+0x38>
    265a:	d1 f0       	breq	.+52     	; 0x2690 <__fixunssfsi+0x46>
    265c:	66 0f       	add	r22, r22
    265e:	77 1f       	adc	r23, r23
    2660:	88 1f       	adc	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	1a f0       	brmi	.+6      	; 0x266c <__fixunssfsi+0x22>
    2666:	ba 95       	dec	r27
    2668:	c9 f7       	brne	.-14     	; 0x265c <__fixunssfsi+0x12>
    266a:	12 c0       	rjmp	.+36     	; 0x2690 <__fixunssfsi+0x46>
    266c:	b1 30       	cpi	r27, 0x01	; 1
    266e:	81 f0       	breq	.+32     	; 0x2690 <__fixunssfsi+0x46>
    2670:	c3 d0       	rcall	.+390    	; 0x27f8 <__fp_zero>
    2672:	b1 e0       	ldi	r27, 0x01	; 1
    2674:	08 95       	ret
    2676:	c0 c0       	rjmp	.+384    	; 0x27f8 <__fp_zero>
    2678:	67 2f       	mov	r22, r23
    267a:	78 2f       	mov	r23, r24
    267c:	88 27       	eor	r24, r24
    267e:	b8 5f       	subi	r27, 0xF8	; 248
    2680:	39 f0       	breq	.+14     	; 0x2690 <__fixunssfsi+0x46>
    2682:	b9 3f       	cpi	r27, 0xF9	; 249
    2684:	cc f3       	brlt	.-14     	; 0x2678 <__fixunssfsi+0x2e>
    2686:	86 95       	lsr	r24
    2688:	77 95       	ror	r23
    268a:	67 95       	ror	r22
    268c:	b3 95       	inc	r27
    268e:	d9 f7       	brne	.-10     	; 0x2686 <__fixunssfsi+0x3c>
    2690:	3e f4       	brtc	.+14     	; 0x26a0 <__fixunssfsi+0x56>
    2692:	90 95       	com	r25
    2694:	80 95       	com	r24
    2696:	70 95       	com	r23
    2698:	61 95       	neg	r22
    269a:	7f 4f       	sbci	r23, 0xFF	; 255
    269c:	8f 4f       	sbci	r24, 0xFF	; 255
    269e:	9f 4f       	sbci	r25, 0xFF	; 255
    26a0:	08 95       	ret

000026a2 <__floatunsisf>:
    26a2:	e8 94       	clt
    26a4:	09 c0       	rjmp	.+18     	; 0x26b8 <__floatsisf+0x12>

000026a6 <__floatsisf>:
    26a6:	97 fb       	bst	r25, 7
    26a8:	3e f4       	brtc	.+14     	; 0x26b8 <__floatsisf+0x12>
    26aa:	90 95       	com	r25
    26ac:	80 95       	com	r24
    26ae:	70 95       	com	r23
    26b0:	61 95       	neg	r22
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255
    26b4:	8f 4f       	sbci	r24, 0xFF	; 255
    26b6:	9f 4f       	sbci	r25, 0xFF	; 255
    26b8:	99 23       	and	r25, r25
    26ba:	a9 f0       	breq	.+42     	; 0x26e6 <__floatsisf+0x40>
    26bc:	f9 2f       	mov	r31, r25
    26be:	96 e9       	ldi	r25, 0x96	; 150
    26c0:	bb 27       	eor	r27, r27
    26c2:	93 95       	inc	r25
    26c4:	f6 95       	lsr	r31
    26c6:	87 95       	ror	r24
    26c8:	77 95       	ror	r23
    26ca:	67 95       	ror	r22
    26cc:	b7 95       	ror	r27
    26ce:	f1 11       	cpse	r31, r1
    26d0:	f8 cf       	rjmp	.-16     	; 0x26c2 <__floatsisf+0x1c>
    26d2:	fa f4       	brpl	.+62     	; 0x2712 <__floatsisf+0x6c>
    26d4:	bb 0f       	add	r27, r27
    26d6:	11 f4       	brne	.+4      	; 0x26dc <__floatsisf+0x36>
    26d8:	60 ff       	sbrs	r22, 0
    26da:	1b c0       	rjmp	.+54     	; 0x2712 <__floatsisf+0x6c>
    26dc:	6f 5f       	subi	r22, 0xFF	; 255
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	8f 4f       	sbci	r24, 0xFF	; 255
    26e2:	9f 4f       	sbci	r25, 0xFF	; 255
    26e4:	16 c0       	rjmp	.+44     	; 0x2712 <__floatsisf+0x6c>
    26e6:	88 23       	and	r24, r24
    26e8:	11 f0       	breq	.+4      	; 0x26ee <__floatsisf+0x48>
    26ea:	96 e9       	ldi	r25, 0x96	; 150
    26ec:	11 c0       	rjmp	.+34     	; 0x2710 <__floatsisf+0x6a>
    26ee:	77 23       	and	r23, r23
    26f0:	21 f0       	breq	.+8      	; 0x26fa <__floatsisf+0x54>
    26f2:	9e e8       	ldi	r25, 0x8E	; 142
    26f4:	87 2f       	mov	r24, r23
    26f6:	76 2f       	mov	r23, r22
    26f8:	05 c0       	rjmp	.+10     	; 0x2704 <__floatsisf+0x5e>
    26fa:	66 23       	and	r22, r22
    26fc:	71 f0       	breq	.+28     	; 0x271a <__floatsisf+0x74>
    26fe:	96 e8       	ldi	r25, 0x86	; 134
    2700:	86 2f       	mov	r24, r22
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	2a f0       	brmi	.+10     	; 0x2712 <__floatsisf+0x6c>
    2708:	9a 95       	dec	r25
    270a:	66 0f       	add	r22, r22
    270c:	77 1f       	adc	r23, r23
    270e:	88 1f       	adc	r24, r24
    2710:	da f7       	brpl	.-10     	; 0x2708 <__floatsisf+0x62>
    2712:	88 0f       	add	r24, r24
    2714:	96 95       	lsr	r25
    2716:	87 95       	ror	r24
    2718:	97 f9       	bld	r25, 7
    271a:	08 95       	ret

0000271c <__fp_cmp>:
    271c:	99 0f       	add	r25, r25
    271e:	00 08       	sbc	r0, r0
    2720:	55 0f       	add	r21, r21
    2722:	aa 0b       	sbc	r26, r26
    2724:	e0 e8       	ldi	r30, 0x80	; 128
    2726:	fe ef       	ldi	r31, 0xFE	; 254
    2728:	16 16       	cp	r1, r22
    272a:	17 06       	cpc	r1, r23
    272c:	e8 07       	cpc	r30, r24
    272e:	f9 07       	cpc	r31, r25
    2730:	c0 f0       	brcs	.+48     	; 0x2762 <__fp_cmp+0x46>
    2732:	12 16       	cp	r1, r18
    2734:	13 06       	cpc	r1, r19
    2736:	e4 07       	cpc	r30, r20
    2738:	f5 07       	cpc	r31, r21
    273a:	98 f0       	brcs	.+38     	; 0x2762 <__fp_cmp+0x46>
    273c:	62 1b       	sub	r22, r18
    273e:	73 0b       	sbc	r23, r19
    2740:	84 0b       	sbc	r24, r20
    2742:	95 0b       	sbc	r25, r21
    2744:	39 f4       	brne	.+14     	; 0x2754 <__fp_cmp+0x38>
    2746:	0a 26       	eor	r0, r26
    2748:	61 f0       	breq	.+24     	; 0x2762 <__fp_cmp+0x46>
    274a:	23 2b       	or	r18, r19
    274c:	24 2b       	or	r18, r20
    274e:	25 2b       	or	r18, r21
    2750:	21 f4       	brne	.+8      	; 0x275a <__fp_cmp+0x3e>
    2752:	08 95       	ret
    2754:	0a 26       	eor	r0, r26
    2756:	09 f4       	brne	.+2      	; 0x275a <__fp_cmp+0x3e>
    2758:	a1 40       	sbci	r26, 0x01	; 1
    275a:	a6 95       	lsr	r26
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	81 1d       	adc	r24, r1
    2760:	81 1d       	adc	r24, r1
    2762:	08 95       	ret

00002764 <__fp_inf>:
    2764:	97 f9       	bld	r25, 7
    2766:	9f 67       	ori	r25, 0x7F	; 127
    2768:	80 e8       	ldi	r24, 0x80	; 128
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	08 95       	ret

00002770 <__fp_nan>:
    2770:	9f ef       	ldi	r25, 0xFF	; 255
    2772:	80 ec       	ldi	r24, 0xC0	; 192
    2774:	08 95       	ret

00002776 <__fp_pscA>:
    2776:	00 24       	eor	r0, r0
    2778:	0a 94       	dec	r0
    277a:	16 16       	cp	r1, r22
    277c:	17 06       	cpc	r1, r23
    277e:	18 06       	cpc	r1, r24
    2780:	09 06       	cpc	r0, r25
    2782:	08 95       	ret

00002784 <__fp_pscB>:
    2784:	00 24       	eor	r0, r0
    2786:	0a 94       	dec	r0
    2788:	12 16       	cp	r1, r18
    278a:	13 06       	cpc	r1, r19
    278c:	14 06       	cpc	r1, r20
    278e:	05 06       	cpc	r0, r21
    2790:	08 95       	ret

00002792 <__fp_round>:
    2792:	09 2e       	mov	r0, r25
    2794:	03 94       	inc	r0
    2796:	00 0c       	add	r0, r0
    2798:	11 f4       	brne	.+4      	; 0x279e <__fp_round+0xc>
    279a:	88 23       	and	r24, r24
    279c:	52 f0       	brmi	.+20     	; 0x27b2 <__fp_round+0x20>
    279e:	bb 0f       	add	r27, r27
    27a0:	40 f4       	brcc	.+16     	; 0x27b2 <__fp_round+0x20>
    27a2:	bf 2b       	or	r27, r31
    27a4:	11 f4       	brne	.+4      	; 0x27aa <__fp_round+0x18>
    27a6:	60 ff       	sbrs	r22, 0
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <__fp_round+0x20>
    27aa:	6f 5f       	subi	r22, 0xFF	; 255
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	8f 4f       	sbci	r24, 0xFF	; 255
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	08 95       	ret

000027b4 <__fp_split3>:
    27b4:	57 fd       	sbrc	r21, 7
    27b6:	90 58       	subi	r25, 0x80	; 128
    27b8:	44 0f       	add	r20, r20
    27ba:	55 1f       	adc	r21, r21
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <__fp_splitA+0x10>
    27be:	5f 3f       	cpi	r21, 0xFF	; 255
    27c0:	71 f0       	breq	.+28     	; 0x27de <__fp_splitA+0x1a>
    27c2:	47 95       	ror	r20

000027c4 <__fp_splitA>:
    27c4:	88 0f       	add	r24, r24
    27c6:	97 fb       	bst	r25, 7
    27c8:	99 1f       	adc	r25, r25
    27ca:	61 f0       	breq	.+24     	; 0x27e4 <__fp_splitA+0x20>
    27cc:	9f 3f       	cpi	r25, 0xFF	; 255
    27ce:	79 f0       	breq	.+30     	; 0x27ee <__fp_splitA+0x2a>
    27d0:	87 95       	ror	r24
    27d2:	08 95       	ret
    27d4:	12 16       	cp	r1, r18
    27d6:	13 06       	cpc	r1, r19
    27d8:	14 06       	cpc	r1, r20
    27da:	55 1f       	adc	r21, r21
    27dc:	f2 cf       	rjmp	.-28     	; 0x27c2 <__fp_split3+0xe>
    27de:	46 95       	lsr	r20
    27e0:	f1 df       	rcall	.-30     	; 0x27c4 <__fp_splitA>
    27e2:	08 c0       	rjmp	.+16     	; 0x27f4 <__fp_splitA+0x30>
    27e4:	16 16       	cp	r1, r22
    27e6:	17 06       	cpc	r1, r23
    27e8:	18 06       	cpc	r1, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	f1 cf       	rjmp	.-30     	; 0x27d0 <__fp_splitA+0xc>
    27ee:	86 95       	lsr	r24
    27f0:	71 05       	cpc	r23, r1
    27f2:	61 05       	cpc	r22, r1
    27f4:	08 94       	sec
    27f6:	08 95       	ret

000027f8 <__fp_zero>:
    27f8:	e8 94       	clt

000027fa <__fp_szero>:
    27fa:	bb 27       	eor	r27, r27
    27fc:	66 27       	eor	r22, r22
    27fe:	77 27       	eor	r23, r23
    2800:	cb 01       	movw	r24, r22
    2802:	97 f9       	bld	r25, 7
    2804:	08 95       	ret

00002806 <__gesf2>:
    2806:	8a df       	rcall	.-236    	; 0x271c <__fp_cmp>
    2808:	08 f4       	brcc	.+2      	; 0x280c <__gesf2+0x6>
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	08 95       	ret

0000280e <__mulsf3>:
    280e:	0b d0       	rcall	.+22     	; 0x2826 <__mulsf3x>
    2810:	c0 cf       	rjmp	.-128    	; 0x2792 <__fp_round>
    2812:	b1 df       	rcall	.-158    	; 0x2776 <__fp_pscA>
    2814:	28 f0       	brcs	.+10     	; 0x2820 <__mulsf3+0x12>
    2816:	b6 df       	rcall	.-148    	; 0x2784 <__fp_pscB>
    2818:	18 f0       	brcs	.+6      	; 0x2820 <__mulsf3+0x12>
    281a:	95 23       	and	r25, r21
    281c:	09 f0       	breq	.+2      	; 0x2820 <__mulsf3+0x12>
    281e:	a2 cf       	rjmp	.-188    	; 0x2764 <__fp_inf>
    2820:	a7 cf       	rjmp	.-178    	; 0x2770 <__fp_nan>
    2822:	11 24       	eor	r1, r1
    2824:	ea cf       	rjmp	.-44     	; 0x27fa <__fp_szero>

00002826 <__mulsf3x>:
    2826:	c6 df       	rcall	.-116    	; 0x27b4 <__fp_split3>
    2828:	a0 f3       	brcs	.-24     	; 0x2812 <__mulsf3+0x4>

0000282a <__mulsf3_pse>:
    282a:	95 9f       	mul	r25, r21
    282c:	d1 f3       	breq	.-12     	; 0x2822 <__mulsf3+0x14>
    282e:	95 0f       	add	r25, r21
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	55 1f       	adc	r21, r21
    2834:	62 9f       	mul	r22, r18
    2836:	f0 01       	movw	r30, r0
    2838:	72 9f       	mul	r23, r18
    283a:	bb 27       	eor	r27, r27
    283c:	f0 0d       	add	r31, r0
    283e:	b1 1d       	adc	r27, r1
    2840:	63 9f       	mul	r22, r19
    2842:	aa 27       	eor	r26, r26
    2844:	f0 0d       	add	r31, r0
    2846:	b1 1d       	adc	r27, r1
    2848:	aa 1f       	adc	r26, r26
    284a:	64 9f       	mul	r22, r20
    284c:	66 27       	eor	r22, r22
    284e:	b0 0d       	add	r27, r0
    2850:	a1 1d       	adc	r26, r1
    2852:	66 1f       	adc	r22, r22
    2854:	82 9f       	mul	r24, r18
    2856:	22 27       	eor	r18, r18
    2858:	b0 0d       	add	r27, r0
    285a:	a1 1d       	adc	r26, r1
    285c:	62 1f       	adc	r22, r18
    285e:	73 9f       	mul	r23, r19
    2860:	b0 0d       	add	r27, r0
    2862:	a1 1d       	adc	r26, r1
    2864:	62 1f       	adc	r22, r18
    2866:	83 9f       	mul	r24, r19
    2868:	a0 0d       	add	r26, r0
    286a:	61 1d       	adc	r22, r1
    286c:	22 1f       	adc	r18, r18
    286e:	74 9f       	mul	r23, r20
    2870:	33 27       	eor	r19, r19
    2872:	a0 0d       	add	r26, r0
    2874:	61 1d       	adc	r22, r1
    2876:	23 1f       	adc	r18, r19
    2878:	84 9f       	mul	r24, r20
    287a:	60 0d       	add	r22, r0
    287c:	21 1d       	adc	r18, r1
    287e:	82 2f       	mov	r24, r18
    2880:	76 2f       	mov	r23, r22
    2882:	6a 2f       	mov	r22, r26
    2884:	11 24       	eor	r1, r1
    2886:	9f 57       	subi	r25, 0x7F	; 127
    2888:	50 40       	sbci	r21, 0x00	; 0
    288a:	8a f0       	brmi	.+34     	; 0x28ae <__mulsf3_pse+0x84>
    288c:	e1 f0       	breq	.+56     	; 0x28c6 <__mulsf3_pse+0x9c>
    288e:	88 23       	and	r24, r24
    2890:	4a f0       	brmi	.+18     	; 0x28a4 <__mulsf3_pse+0x7a>
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	bb 1f       	adc	r27, r27
    2898:	66 1f       	adc	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	88 1f       	adc	r24, r24
    289e:	91 50       	subi	r25, 0x01	; 1
    28a0:	50 40       	sbci	r21, 0x00	; 0
    28a2:	a9 f7       	brne	.-22     	; 0x288e <__mulsf3_pse+0x64>
    28a4:	9e 3f       	cpi	r25, 0xFE	; 254
    28a6:	51 05       	cpc	r21, r1
    28a8:	70 f0       	brcs	.+28     	; 0x28c6 <__mulsf3_pse+0x9c>
    28aa:	5c cf       	rjmp	.-328    	; 0x2764 <__fp_inf>
    28ac:	a6 cf       	rjmp	.-180    	; 0x27fa <__fp_szero>
    28ae:	5f 3f       	cpi	r21, 0xFF	; 255
    28b0:	ec f3       	brlt	.-6      	; 0x28ac <__mulsf3_pse+0x82>
    28b2:	98 3e       	cpi	r25, 0xE8	; 232
    28b4:	dc f3       	brlt	.-10     	; 0x28ac <__mulsf3_pse+0x82>
    28b6:	86 95       	lsr	r24
    28b8:	77 95       	ror	r23
    28ba:	67 95       	ror	r22
    28bc:	b7 95       	ror	r27
    28be:	f7 95       	ror	r31
    28c0:	e7 95       	ror	r30
    28c2:	9f 5f       	subi	r25, 0xFF	; 255
    28c4:	c1 f7       	brne	.-16     	; 0x28b6 <__mulsf3_pse+0x8c>
    28c6:	fe 2b       	or	r31, r30
    28c8:	88 0f       	add	r24, r24
    28ca:	91 1d       	adc	r25, r1
    28cc:	96 95       	lsr	r25
    28ce:	87 95       	ror	r24
    28d0:	97 f9       	bld	r25, 7
    28d2:	08 95       	ret

000028d4 <__udivmodsi4>:
    28d4:	a1 e2       	ldi	r26, 0x21	; 33
    28d6:	1a 2e       	mov	r1, r26
    28d8:	aa 1b       	sub	r26, r26
    28da:	bb 1b       	sub	r27, r27
    28dc:	fd 01       	movw	r30, r26
    28de:	0d c0       	rjmp	.+26     	; 0x28fa <__udivmodsi4_ep>

000028e0 <__udivmodsi4_loop>:
    28e0:	aa 1f       	adc	r26, r26
    28e2:	bb 1f       	adc	r27, r27
    28e4:	ee 1f       	adc	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	a2 17       	cp	r26, r18
    28ea:	b3 07       	cpc	r27, r19
    28ec:	e4 07       	cpc	r30, r20
    28ee:	f5 07       	cpc	r31, r21
    28f0:	20 f0       	brcs	.+8      	; 0x28fa <__udivmodsi4_ep>
    28f2:	a2 1b       	sub	r26, r18
    28f4:	b3 0b       	sbc	r27, r19
    28f6:	e4 0b       	sbc	r30, r20
    28f8:	f5 0b       	sbc	r31, r21

000028fa <__udivmodsi4_ep>:
    28fa:	66 1f       	adc	r22, r22
    28fc:	77 1f       	adc	r23, r23
    28fe:	88 1f       	adc	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	1a 94       	dec	r1
    2904:	69 f7       	brne	.-38     	; 0x28e0 <__udivmodsi4_loop>
    2906:	60 95       	com	r22
    2908:	70 95       	com	r23
    290a:	80 95       	com	r24
    290c:	90 95       	com	r25
    290e:	9b 01       	movw	r18, r22
    2910:	ac 01       	movw	r20, r24
    2912:	bd 01       	movw	r22, r26
    2914:	cf 01       	movw	r24, r30
    2916:	08 95       	ret

00002918 <__muluhisi3>:
    2918:	0e 94 97 14 	call	0x292e	; 0x292e <__umulhisi3>
    291c:	a5 9f       	mul	r26, r21
    291e:	90 0d       	add	r25, r0
    2920:	b4 9f       	mul	r27, r20
    2922:	90 0d       	add	r25, r0
    2924:	a4 9f       	mul	r26, r20
    2926:	80 0d       	add	r24, r0
    2928:	91 1d       	adc	r25, r1
    292a:	11 24       	eor	r1, r1
    292c:	08 95       	ret

0000292e <__umulhisi3>:
    292e:	a2 9f       	mul	r26, r18
    2930:	b0 01       	movw	r22, r0
    2932:	b3 9f       	mul	r27, r19
    2934:	c0 01       	movw	r24, r0
    2936:	a3 9f       	mul	r26, r19
    2938:	70 0d       	add	r23, r0
    293a:	81 1d       	adc	r24, r1
    293c:	11 24       	eor	r1, r1
    293e:	91 1d       	adc	r25, r1
    2940:	b2 9f       	mul	r27, r18
    2942:	70 0d       	add	r23, r0
    2944:	81 1d       	adc	r24, r1
    2946:	11 24       	eor	r1, r1
    2948:	91 1d       	adc	r25, r1
    294a:	08 95       	ret

0000294c <strcpy>:
    294c:	fb 01       	movw	r30, r22
    294e:	dc 01       	movw	r26, r24
    2950:	01 90       	ld	r0, Z+
    2952:	0d 92       	st	X+, r0
    2954:	00 20       	and	r0, r0
    2956:	e1 f7       	brne	.-8      	; 0x2950 <strcpy+0x4>
    2958:	08 95       	ret

0000295a <_exit>:
    295a:	f8 94       	cli

0000295c <__stop_program>:
    295c:	ff cf       	rjmp	.-2      	; 0x295c <__stop_program>
